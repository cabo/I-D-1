<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.0.26 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc strict="yes"?>
<?rfc toc="yes"?>
<?rfc tocdepth="3"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc iprnotified="no"?>

<rfc ipr="trust200902" docName="draft-ietf-core-resource-directory-03pre-b" category="std">

  <front>
    <title>CoRE Resource Directory</title>

    <author initials="Z." surname="Shelby" fullname="Zach Shelby">
      <organization>ARM</organization>
      <address>
        <postal>
          <street>150 Rose Orchard</street>
          <city>San Jose</city>
          <code>95134</code>
          <country>USA</country>
        </postal>
        <phone>+1-408-203-9434</phone>
        <email>zach.shelby@arm.com</email>
      </address>
    </author>
    <author initials="M." surname="Koster" fullname="Michael Koster">
      <organization>ARM</organization>
      <address>
        <postal>
          <street>150 Rose Orchard</street>
          <city>San Jose</city>
          <code>95134</code>
          <country>USA</country>
        </postal>
        <phone>+1-408-576-1500 x11516</phone>
        <email>Michael.Koster@arm.com</email>
      </address>
    </author>
    <author initials="C." surname="Bormann" fullname="Carsten Bormann">
      <organization>Universitaet Bremen TZI</organization>
      <address>
        <postal>
          <street>Postfach 330440</street>
          <city>Bremen</city>
          <code>D-28359</code>
          <country>Germany</country>
        </postal>
        <phone>+49-421-218-63921</phone>
        <email>cabo@tzi.org</email>
      </address>
    </author>
    <author initials="P." surname="van der Stok" fullname="Peter van der Stok">
      <organization abbrev="consultant">consultant</organization>
      <address>
        <phone>+31-492474673 (Netherlands), +33-966015248 (France)</phone>
        <email>consultancy@vanderstok.org</email>
        <uri>www.vanderstok.org</uri>
      </address>
    </author>

    <date year="2015" month="April"/>

    <area>Internet</area>
    <workgroup>CoRE</workgroup>
    <keyword>CoRE, Web Linking, Resource Discovery, Resource Directory</keyword>

    <abstract>


<t>In many M2M applications, direct discovery of resources is not practical
due to sleeping nodes, disperse networks, or networks where multicast traffic
is inefficient. These problems can be solved by employing an entity called
a Resource Directory (RD), which hosts descriptions of resources held on
other servers, allowing lookups to be performed for those resources. This
document specifies the web interfaces that a Resource Directory supports
in order for web servers to discover the RD and to register, maintain, lookup
and remove resources descriptions. Furthermore, new link attributes useful
in conjunction with an RD are defined.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>The work on Constrained RESTful Environments (CoRE) aims at realizing the
REST architecture in a suitable form for the most constrained nodes (e.g.,
8-bit microcontrollers with limited RAM and ROM) and networks (e.g. 6LoWPAN).
CoRE is aimed at machine-to-machine (M2M) applications such as smart energy
and building automation.</t>

<t>The discovery of resources offered by a constrained server is very important
in machine-to-machine applications where there are no humans in the loop and
static interfaces result in fragility. The discovery of resources provided by
an HTTP Web Server is typically called Web Linking <xref target="RFC5988"/>. The use of
Web Linking for the description and discovery of resources hosted by
constrained web servers is specified by the CoRE Link Format
<xref target="RFC6690"/>. This specification however only describes how to discover
resources from the web server that hosts them by requesting
<spanx style="verb">/.well-known/core</spanx>. In many M2M scenarios, direct discovery of resources is
not practical due to sleeping nodes, disperse networks, or networks where
multicast traffic is inefficient. These problems can be solved by employing
an entity called a Resource Directory (RD), which hosts descriptions of
resources held on other servers, allowing lookups to be performed for those
resources.</t>

<t>This document specifies the web interfaces that a Resource Directory supports
in order for web servers to discover the RD and to register, maintain, lookup
and remove resource descriptions. Furthermore, new link attributes useful in
conjunction with a Resource Directory are defined. Although the examples in
this document show the use of these interfaces with CoAP <xref target="RFC7252"/>, they
can be applied in an equivalent manner to HTTP <xref target="RFC7230"/>.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”,
“SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL”
in this
document are to be interpreted as described in <xref target="RFC2119"/>. The
term “byte” is used in its now customary sense as a synonym for “octet”.</t>

<t>This specification requires readers to be familiar with all the terms and
concepts that are discussed in <xref target="RFC5988"/> and <xref target="RFC6690"/>. Readers should
also be familiar with the terms and concepts discussed in <xref target="RFC7252"/>.  To
describe the REST interfaces defined in this specification, the URI Template
format is used <xref target="RFC6570"/>.</t>

<t>This specification makes use of the following additional terminology:</t>

<t><list style="hanging">
  <t hangText='Resource Directory'><vspace blankLines='0'/>
  A web entity that stores information about web resources and implements the
REST interfaces defined in this specification for registration and lookup
of those resources.</t>
</list></t>

<t><list style="hanging">
  <t hangText='Domain'><vspace blankLines='0'/>
  In the context of a Resource Directory, a domain is a
logical grouping of endpoints. This specification assumes
that the list of Domains supported by an RD is
pre-configured by that RD. When a domain is exported to DNS,
the domain value equates to the DNS domain name.</t>
</list></t>

<t><list style="hanging">
  <t hangText='Group'><vspace blankLines='0'/>
  In the context of a Resource Directory, a group is a logical grouping of
endpoints for the purpose of group communications. All groups within a domain
are unique.</t>
</list></t>

<t><list style="hanging">
  <t hangText='Endpoint'><vspace blankLines='0'/>
  Endpoint (EP) is a term used to describe a web server or client in <xref target="RFC7252"/>. In the context of this specification an endpoint is used to describe a
web server that registers resources to the Resource Directory. An endpoint
is identified by its endpoint name, which is included during registration,
and is unique within the associated domain of the registration.</t>
</list></t>

</section>
<section anchor="arch" title="Architecture and Use Cases">

<t>The resource directory architecture is illustrated in <xref target="fig-arch"/>. A
Resource Directory (RD) is used as a repository for Web Links <xref target="RFC5988"/>
about resources hosted on other web servers, which are called endpoints
(EP).
An endpoint is a web server associated with a scheme, IP address and port
(called Context), thus a physical node may host one or more endpoints. The
RD implements a set of REST interfaces for endpoints to register and maintain
sets of Web Links (called resource directory entries), and for clients to
lookup resources from the RD or maintain groups. Endpoints themselves can
also act as clients. An RD can be logically segmented by the use of Domains.
The domain an endpoint is associated with can be defined by the RD or configured
by an outside entity. This information hierarchy is shown in <xref target="fig-hierarchy"/>.</t>

<t>Endpoints are assumed to proactively register and maintain resource directory
entries on the RD, which are soft state and need to be periodically refreshed.
An endpoint is provided with interfaces to register, update and remove a
resource directory entry. Furthermore, a mechanism to discover an RD using
the CoRE Link Format is defined. It is also possible for an RD to proactively
discover Web Links from endpoints and add them as resource directory entries.
A lookup interface for discovering any of the Web Links held in the RD is
provided using the CoRE Link Format.</t>

<figure title="The resource directory architecture." align="left" anchor="fig-arch"><artwork><![CDATA[
             Registration     Lookup, Group
  +----+          |                 |
  | EP |----      |                 |
  +----+    ----  |                 |
                --|-    +------+    |
  +----+          | ----|      |    |     +--------+
  | EP | ---------|-----|  RD  |----|-----| Client |
  +----+          | ----|      |    |     +--------+
                --|-    +------+    |
  +----+    ----  |                 |
  | EP |----      |                 |
  +----+

]]></artwork></figure>

<figure title="The resource directory information hierarchy." align="left" anchor="fig-hierarchy"><artwork><![CDATA[
               +------------+
               |   Domain   | <-- Name
               +------------+
                    |     |
                    |   +------------+
                    |   |   Group    | <-- Name, IP
                    |   +------------+
                    |     |
               +------------+
               |  Endpoint  |  <-- Name, Scheme, IP, Port
               +------------+
                     |
                     |
               +------------+
               |  Resource  |  <-- Target, Parameters
               +------------+

]]></artwork></figure>

<section anchor="cellular" title="Use Case: Cellular M2M">

<t>Over the last few years, mobile operators around the world
have focused on development of M2M solutions in order to
expand the business to the new type of users: machines. The
machines are connected directly to a mobile network using an appropriate
embedded air interface (GSM/GPRS, WCDMA, LTE) or via a gateway providing
short and wide range wireless interfaces. From the system design point of
view, the ambition is to design horizontal solutions that can enable utilization
of machines in different applications depending on their current availability
and capabilities as well as application requirements, thus avoiding silo
like solutions. One of the crucial enablers of such design is the ability
to discover resources (machines — endpoints) capable of providing required
information at a given time or acting on instructions from the end users.</t>

<t>In a typical scenario, during a boot-up procedure (and periodically afterwards),
the machines (endpoints) register with a Resource Directory (for example
EPs installed on vehicles enabling tracking of their position for fleet management
purposes and monitoring environment parameters) hosted by the mobile operator
or somewhere else in the network, periodically a description of its own capabilities.
Due to the usual network configuration of mobile networks, the EPs attached
to the mobile network do not have routable addresses. Therefore, a remote
server is usually used to provide proxy access to the EPs. The address of
each (proxy) endpoint on this server is included in the resource description
stored in the RD. The users, for example mobile applications for environment
monitoring, contact the RD, look-up the endpoints capable of providing information
about the environment using appropriate set of link parameters, obtain information
on how to contact them (URLs of the proxy server) and then initiate interaction
to obtain information that is finally processed, displayed on the screen
and usually stored in a database. Similarly, fleet management systems provide
the appropriate link parameters to the RD to look-up for EPs deployed on
the vehicles the application is responsible for.</t>

</section>
<section anchor="automation" title="Use Case: Home and Building Automation">

<t>Home and commercial building automation systems can benefit from the use
of M2M web services.  The discovery requirements of these applications are
demanding. Home automation usually relies on run-time discovery to commission
the system, whereas in building automation a combination of professional
commissioning and run-time discovery is used. Both home and building automation
involve peer-to-peer interactions between endpoints, and involve battery-powered
sleeping devices.</t>

<t>The exporting of resource information to other discovery systems is also
important in these automation applications. In home automation there is a
need to interact with other consumer electronics, which may already support
DNS-SD, and in building automation larger resource directories or DNS-SD
covering multiple buildings.</t>

</section>
<section anchor="usecase-catalogues" title="Use Case: Link Catalogues">

<t>Resources may be shared through data brokers that have no knowledge beforehand
of who is going to consume the data. Resource Directory can be used to hold
links about resources and services hosted anywhere to make them discoverable
by a general class of applications.</t>

<t>For example, environmental and weather sensors that generate data for public
consumption may provide the data to an intermediary server, or broker. Sensor
data are published to the intermediary upon changes or at regular intervals.
Descriptions of the sensors that resolve to links to sensor data may be published
to a Resource Directory. Applications wishing to consume the data can use
the Resource Directory lookup function set to discover and resolve links
to the desired resources and endpoints. The Resource Directory service need
not be coupled with the data intermediary service. Mapping of Resource Directories
to data intermediaries may be many-to-many.</t>

<t>Metadata in link-format or link-format+json representations are supplied
by Resource Directories, which may be internally stored as  triples, or relation/attribute
pairs providing metadata about resource links. External catalogs that are
represented in other formats may be converted to link-format or link-format+json
for storage and access by Resource Directories. Since it is common practice
for these to be URN encoded, simple and lossless structural transforms will
generally be sufficient to store external metadata in Resource Directories.</t>

<t>The additional features of Resource Directory allow domains to be defined
to enable access to a particular set of resources from particular applications.
This provides isolation and protection of sensitive data when needed. Resource
groups may defined to allow batched reads from multiple resources.</t>

</section>
</section>
<section anchor="simple" title="Simple Directory Discovery">

<t>Not all endpoints hosting resources are expected to know how to implement the
Resource Directory Function Set (see <xref target="rd"/>) and thus explicitly register
with a Resource Directory (or other such directory server). Instead, simple
endpoints can implement the generic Simple Directory Discovery approach
described in this section. An RD implementing this specification MUST
implement Simple Directory Discovery. However, there may be security reasons
why this form of directory discovery would be disabled.</t>

<t>This approach requires that the endpoint makes available the hosted resources
that it wants to be discovered, as links on its <spanx style="verb">/.well-known/core</spanx> interface as
specified in <xref target="RFC6690"/>.</t>

<t>The endpoint then finds one or more IP addresses of the directory server it
wants to know about its resources as described in <xref target="simple_finding"/>.</t>

<t>An endpoint that wants to make itself discoverable occasionally
sends a POST request to the <spanx style="verb">/.well-known/core</spanx> URI of any candidate directory
server that it finds. The body of the POST request is either</t>

<t><list style="symbols">
  <t>empty, in which case the directory server is encouraged by this POST
request to perform GET requests at the requesting server’s default discovery
URI.</t>
</list></t>

<t>or</t>

<t><list style="symbols">
  <t>a non-empty link-format document, which indicates the specific services
that the requesting server wants to make known to the directory server.</t>
</list></t>

<t>The directory server integrates the information it received this way into its
resource directory.  It MAY make the information available to further
directories, if it can ensure that a loop does not form.  The protocol used
between directories to ensure loop-free operation is outside the scope of
this document.</t>

<t>The following example shows an endpoint using simple resource discovery,
by simply sending a POST with its links in the body to a directory.</t>

<figure align="left"><artwork><![CDATA[
     EP                                               RD
     |                                                 |
     | -- POST /.well-known/core "</sen/temp>..." ---> |
     |                                                 |
     |                                                 |
     | <---- 2.01 Created   -------------------------  |
     |                                                 |
]]></artwork></figure>

<section anchor="simple_finding" title="Finding a Directory Server">

<t>Endpoints that want to contact a directory server can obtain candidate IP
addresses for such servers in a number of ways.</t>

<t>In a 6LoWPAN, good candidates can be taken from:</t>

<t><list style="symbols">
  <t>specific static configuration (e.g., anycast addresses), if any,</t>
  <t>the ABRO option of 6LoWPAN-ND <xref target="RFC6775"/>,</t>
  <t>other ND options that happen to point to servers (such as RDNSS),</t>
  <t>DHCPv6 options that might be defined later.</t>
</list></t>

<t>In networks with more inexpensive use of multicast, the candidate IP
address may be a well-known multicast address, i.e. directory servers are
found by simply sending POST requests to that well-known multicast address
(details TBD).</t>

<t>As some of these sources are just (more or less educated) guesses, endpoints
MUST make use of any error messages to very strictly rate-limit requests to
candidate IP addresses that don’t work out.  For example, an ICMP Destination
Unreachable message (and, in particular, the port unreachable code for this
message) may indicate the lack of a CoAP server on the candidate host, or a
CoAP error response code such as 4.05 “Method Not Allowed” may indicate
unwillingness of a CoAP server to act as a directory server.</t>

</section>
<section anchor="third-party-registration" title="Third-party registration">

<t>For some applications, even Simple Directory Discovery may be too taxing
for certain very constrained devices, in particular if the security requirements
become too onerous.</t>

<t>In a controlled environment (e.g. building control), the Resource Directory
can be filled by a third device, called an installation tool. The installation
tool can fill the Resource Directory from a database or other means. For
that purpose the scheme, IP address and port of the registered device is
indicated in the Context parameter of the registration as well.</t>

</section>
</section>
<section anchor="rd" title="Resource Directory Function Set">

<t>This section defines the REST interfaces between an RD and endpoints, which
is called the Resource Directory Function Set. Although the examples
throughout this section assume the use of CoAP <xref target="RFC7252"/>, these REST
interfaces can also be realized using HTTP <xref target="RFC7230"/>. An RD implementing
this specification MUST support the discovery, registration, update, lookup,
and removal interfaces defined in this section.</t>

<t>Resource directory entries are designed to be easily exported to other
discovery mechanisms such as DNS-SD. For that reason, parameters that would
meaningfully be mapped to DNS SHOULD be limited to a maximum length of 63
bytes.<!-- TODO: Is there maybe also a need to further restrict the set of
characters available?  --></t>

<section anchor="discovery" title="Discovery">

<t>Before an endpoint can make use of an RD, it must first know the RD’s IP
address, port and the path of its RD Function Set. There can be several
mechanisms for discovering the RD including assuming a default location
(e.g. on an Edge Router in a LoWPAN), by assigning an anycast address to the
RD, using DHCP, or by discovering the RD using the CoRE Link Format (see also
<xref target="simple_finding"/>). This section defines discovery of the RD using the
well-known interface of the CoRE Link Format <xref target="RFC6690"/> as the required
mechanism. It is however expected that RDs will also be discoverable via
other methods depending on the deployment.</t>

<t>Discovery is performed by sending either a multicast or unicast GET request
to <spanx style="verb">/.well-known/core</spanx> and including a Resource Type (rt) parameter
<xref target="RFC6690"/> with the value “core.rd” in the query string. Likewise, a
Resource Type parameter value of “core.rd-lookup” is used to discover the RD
Lookup Function Set.  Upon success, the response will contain a payload with
a link format entry for each RD discovered, with the URL indicating the root
resource of the RD. When performing multicast discovery, the multicast IP
address used will depend on the scope required and the multicast capabilities
of the network.</t>

<t>An RD implementation of this specification MUST support query filtering for
the rt parameter as defined in <xref target="RFC6690"/>.</t>

<t>The discovery request interface is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  EP -&gt; RD</t>
  <t hangText='Method:'>
  GET</t>
  <t hangText='URI Template:'>
  /.well-known/core{?rt}</t>
  <t hangText='URI Template Variables:'>
        <list style="hanging">
        <t hangText='rt :='>
        Resource Type (optional). MAY contain the value “core.rd”, “core.rd-lookup”,
“core.rd-group” or “core.rd*”</t>
      </list>
  </t>
  <t hangText='Content-Type:'>
  application/link-format (if any)</t>
</list></t>

<t>The following response codes are defined for this interface:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.05 “Content” with an
application/link-format payload containing one or more matching entries for
the RD resource.</t>
  <t hangText='Failure:'>
  4.04 “Not Found” is returned in case no matching entry is found for a unicast
request.</t>
  <t hangText='Failure:'>
  4.00 “Bad Request” is returned in case of a malformed request for a unicast
request.</t>
  <t hangText='Failure:'>
  No error response to a multicast request.</t>
</list></t>

<t>The following example shows an endpoint discovering an RD using this interface,
thus learning that the base RD resource is, in this example, at /rd.  Note
that it is up to the RD to choose its base RD resource, although diagnostics
and debugging is facilitated by using the base paths specified here where
possible.</t>

<figure align="left"><artwork><![CDATA[
     EP                                               RD
     |                                                 |
     | ----- GET /.well-known/core?rt=core.rd* ------> |
     |                                                 |
     |                                                 |
     | <---- 2.05 Content "</rd>; rt="core.rd" ------  |
     |                                                 |


]]></artwork></figure>

<figure align="left"><artwork><![CDATA[
Req: GET coap://[ff02::1]/.well-known/core?rt=core.rd*

Res: 2.05 Content
</rd>;rt="core.rd",
</rd-lookup>;rt="core.rd-lookup",
</rd-group>;rt="core.rd-group"
]]></artwork></figure>

</section>
<section anchor="registration" title="Registration">

<t>After discovering the location of an RD Function Set, an endpoint MAY
register its resources using the registration interface. This interface
accepts a POST from an endpoint containing the list of resources to be added
to the directory as the message payload in the CoRE Link Format <xref target="RFC6690"/>
or JSON Link Format <xref target="I-D.ietf-core-links-json"/> along with query string
parameters indicating the name of the endpoint, its domain and the lifetime
of the registration. All parameters except the endpoint name are optional. It
is expected that other specifications will define further parameters (see
<xref target="iana-registry"/>). The RD then creates a new resource or updates an existing
resource in the RD and returns its location. An endpoint MUST use that
location when refreshing registrations using this interface. Endpoint
resources in the RD are kept active for the period indicated by the lifetime
parameter. The endpoint is responsible for refreshing the entry within this
period using either the registration or update interface. The registration
interface MUST be implemented to be idempotent, so that registering twice
with the same endpoint parameter does not create multiple RD entries.</t>

<t>The registration request interface is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  EP -&gt; RD</t>
  <t hangText='Method:'>
  POST</t>
  <t hangText='URI Template:'>
  /{+rd}{?ep,d,et,lt,con}</t>
  <t hangText='URI Template Variables:'>
        <list style="hanging">
        <t hangText='rd :='>
        RD Function Set
path (mandatory). This is the path of
the RD Function Set, as obtained from discovery. An RD SHOULD use the value
“rd” for this variable whenever possible.</t>
        <t hangText='ep :='>
        Endpoint (mandatory). The endpoint identifier or name of the registering
node, unique within that domain. The maximum length of this parameter is
63 bytes.</t>
        <t hangText='d :='>
        Domain (optional). The domain to which this endpoint belongs. This parameter
SHOULD be less than 63 bytes. Optional. When this parameter is elided, the
RD MAY associate the endpoint with a configured default domain. The domain
value is needed to export the endpoint to DNS-SD (see <xref target="dns-sd"/>).</t>
        <t hangText='et :='>
        Endpoint Type (optional). The semantic type of the endpoint. This parameter
SHOULD be less than 63 bytes. Optional.</t>
        <t hangText='lt :='>
        Lifetime (optional). Lifetime of the registration in seconds. Range of 60-4294967295.
If no lifetime is included, a default value of 86400 (24 hours) SHOULD be
assumed.</t>
        <t hangText='con :='>
        Context (optional). This parameter sets the scheme, address and port at
which this server is available in the form scheme://host:port. Optional. In
the absence of this parameter the scheme of the protocol, source IP address
and source port of the register request are assumed. This parameter is
mandatory when the directory is filled by a third party such as an
installation tool.</t>
      </list>
  </t>
  <t hangText='Content-Type:'>
  application/link-format</t>
  <t hangText='Content-Type:'>
  application/link-format+json</t>
</list></t>

<t>The following response codes are defined for this interface:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.01 “Created”. The Location header
MUST be included with the new resource entry for the
endpoint. This Location MUST be a stable identifier
generated by the RD as it is used for all subsequent
operations on this registration. The resource returned in
the Location is only for the purpose of the Update (POST)
and Removal (DELETE), and MUST NOT implement GET or PUT
methods.</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  5.03 “Service Unavailable”. Service could not perform the operation.</t>
</list></t>

<t>The following example shows an endpoint with the name “node1” registering
two resources to an RD using this interface. The resulting location /rd/4521
is just an example of an RD generated location.</t>

<figure align="left"><artwork><![CDATA[
    EP                                                RD
     |                                                 |
     | --- POST /rd?ep=node1 "</sensors..." ------->   |
     |                                                 |
     |                                                 |
     | <-- 2.01 Created Location: /rd/4521 ----------  |
     |                                                 |
]]></artwork></figure>

<figure align="left"><artwork><![CDATA[
Req: POST coap://rd.example.com/rd?ep=node1
Payload:
</sensors/temp>;ct=41;rt="temperature-c";if="sensor",
</sensors/light>;ct=41;rt="light-lux";if="sensor"

Res: 2.01 Created
Location: /rd/4521
]]></artwork></figure>

</section>
<section anchor="update" title="Update">

<t>The update interface is used by an endpoint to refresh or update its
registration with an RD. To use the interface, the endpoint sends a POST
request to the resource returned in the Location option in the response to
the first registration.  An update MAY update the lifetime or context
parameters if they have changed since the last registration or
update. Parameters that have not changed SHOULD NOT be included in an
update. Upon receiving an update request, the RD resets the timeout for that
endpoint and updates the scheme, IP address and port of the endpoint (using
the source address of the update, or the context parameter if present).</t>

<t>An update MAY optionally add or replace links for the endpoint by including
those links in the payload of the update as a CoRE Link Format
document. Including links in an update message greatly increases the load on
an RD and SHOULD be done infrequently. A link is replaced only if both the
target URI and relation type match (see <xref target="endpoint_identification"/>).<!--
TODO: explain how a patch format, probably not RFC7386, could be used to
delete, replace, and add entries.)  --></t>

<t>The update request interface is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  EP -&gt; RD</t>
  <t hangText='Method:'>
  POST</t>
  <t hangText='URI Template:'>
  /{+location}{?lt,con}</t>
  <t hangText='URI Template Variables:'>
        <list style="hanging">
        <t hangText='location :='>
        This is the Location path returned by the RD as a result of a successful
earlier registration.</t>
        <t hangText='lt :='>
        Lifetime (optional). Lifetime of the registration in seconds. Range of 60-4294967295.
If no lifetime is included, a default value of 86400 (24 hours) SHOULD be
assumed.</t>
        <t hangText='con :='>
        Context (optional). This parameter sets the scheme, address and port at
which this server is available in the form
scheme://host:port. Optional. In the absence of this parameter the scheme
of the protocol, source IP address and source port used to register are
assumed. This parameter is compulsory when the directory is filled by a
third party such as an installation tool.</t>
      </list>
  </t>
  <t hangText='Content-Type:'>
  application/link-format (optional)</t>
  <t hangText='Content-Type:'>
  application/link-format+json (optional)</t>
</list></t>

<t>The following response codes are defined for this interface:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.04 “Changed” in the update was successfully processed.</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Registration does not exist (e.g. may have expired).</t>
  <t hangText='Failure:'>
  5.03 “Service Unavailable”. Service could not perform the operation.</t>
</list></t>

<t>The following example shows an endpoint updating a new set of resources to
an RD using this interface.</t>

<figure align="left"><artwork><![CDATA[
     EP                                                RD
     |                                                 |
     | --- POST /rd/4521  -------------------------->  |
     |                                                 |
     |                                                 |
     | <-- 2.04 Changed  ----------------------------  |
     |                                                 |
]]></artwork></figure>

<figure align="left"><artwork><![CDATA[
Req: POST /rd/4521

Res: 2.04 Changed
]]></artwork></figure>

</section>
<section anchor="removal" title="Removal">

<t>Although RD entries have soft state and will eventually timeout after their
lifetime, an endpoint SHOULD explicitly remove its entry from the RD if it
knows it will no longer be available (for example on shut-down). This is
accomplished using a removal interface on the RD by performing a DELETE on
the endpoint resource.</t>

<t>The removal request interface is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  EP -&gt; RD</t>
  <t hangText='Method:'>
  DELETE</t>
  <t hangText='URI Template:'>
  /{+location}</t>
  <t hangText='URI Template Variables:'>
        <list style="hanging">
        <t hangText='location :='>
        This is the Location path returned by the RD as a result of a successful
earlier registration.</t>
      </list>
  </t>
</list></t>

<t>The following responses codes are defined for this interface:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.02 “Deleted” upon successful deletion</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Registration does not exist (e.g. may have expired).</t>
  <t hangText='Failure:'>
  5.03 “Service Unavailable”. Service could not perform the operation.</t>
</list></t>

<t>The following examples shows successful removal of the endpoint from the RD.</t>

<figure align="left"><artwork><![CDATA[
    EP                                                RD
     |                                                 |
     | --- DELETE /rd/4521  ------------------------>  |
     |                                                 |
     |                                                 |
     | <-- 2.02 Deleted  ----------------------------  |
     |                                                 |
]]></artwork></figure>

<figure align="left"><artwork><![CDATA[
Req: DELETE /rd/4521

Res: 2.02 Deleted
]]></artwork></figure>

</section>
</section>
<section anchor="group" title="Group Function Set">

<t>This section defines a function set for the creation of groups of endpoints
for the purpose of managing and looking up endpoints for group operations.
The group function set is similar to the resource directory function set,
in that a group may be created or removed. However unlike an endpoint entry,
a group entry consists of a list of endpoints and does not have a lifetime
associated with it. In order to make use of multicast requests with CoAP,
a group MAY have a multicast address associated with it.</t>

<section anchor="group-register" title="Register a Group">

<t>In order to create a group, a management entity used to configure groups,
makes a request to the RD indicating the name of the group to create (or
update), optionally the domain the group belongs to, and optionally the multicast
address of the group. The registration message includes the list of endpoints
that belong to that group. If an endpoint has already registered with the
RD, the RD attempts to use the context of the endpoint from its RD endpoint
entry. If the client registering the group knows the endpoint has already
registered, then it MAY send a blank target URI for that endpoint link when
registering the group. Configuration of the endpoints themselves is out of
scope of this specification. Such an interface for managing the group membership
of an endpoint has been defined in <xref target="RFC7390"/>.</t>

<t>The registration request interface is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Manager -&gt; RD</t>
  <t hangText='Method:'>
  POST</t>
  <t hangText='URI Template:'>
  /{+rd-group}{?gp,d,con}</t>
  <t hangText='URI Template Variables:'>
        <list style="hanging">
        <t hangText='rd-group :='>
        RD Group Function Set path (mandatory). This is the path of the RD Group
Function Set. An RD SHOULD use the value “rd-group” for this variable whenever
possible.</t>
        <t hangText='gp :='>
        Group Name (mandatory). The name of the group to be created or replaced,
unique within that domain. The maximum length of this parameter is 63 bytes.</t>
        <t hangText='d :='>
        Domain (optional). The domain to which this group belongs. The maximum
length of this parameter is 63 bytes. Optional. When this parameter is
elided, the RD MAY associate the endpoint with a configured default
domain. The domain value is needed to export the endpoint to DNS-SD (see
<xref target="dns-sd"/>)</t>
        <t hangText='con :='>
        Context (optional). This parameter is used to set the IP multicast
address at which this server is available in the form
scheme://multicast-address:port.  Optional. In the absence of this parameter
no multicast address is configured.  This parameter is compulsory when the
directory is filled by an installation tool.</t>
      </list>
  </t>
  <t hangText='Content-Type:'>
  application/link-format</t>
  <t hangText='Content-Type:'>
  application/link-format+json</t>
</list></t>

<t>The following response codes are defined for this interface:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.01 “Created”. The Location header MUST be included with the new group
entry.  This Location MUST be a stable identifier generated by the RD as it
is used for delete operations on this registration.</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  5.03 “Service Unavailable”. Service could not perform the operation.</t>
</list></t>

<t>The following example shows a group with the name “lights” registering two
endpoints to an RD using this interface. The resulting location /rd-group/12
is just an example of an RD generated group location.</t>

<figure align="left"><artwork><![CDATA[
    EP                                                RD
     |                                                 |
     | - POST /rd-group?gp=lights "<>;ep=node1..." --> |
     |                                                 |
     |                                                 |
     | <---- 2.01 Created Location: /rd-group/12 ----  |
     |                                                 |
]]></artwork></figure>

<figure align="left"><artwork><![CDATA[
Req: POST coap://rd.example.com/rd-group?gp=lights
Payload:
<>;ep="node1",
<>;ep="node2"

Res: 2.01 Created
Location: /rd-group/12
]]></artwork></figure>

</section>
<section anchor="group-removal" title="Group Removal">

<t>A group can be removed simply by sending a removal message to the location
returned when registering the group. Removing a group MUST NOT remove the
endpoints of the group from the RD.</t>

<t>The removal request interface is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Manager -&gt; RD</t>
  <t hangText='Method:'>
  DELETE</t>
  <t hangText='URI Template:'>
  /{+location}</t>
  <t hangText='URI Template Variables:'>
        <list style="hanging">
        <t hangText='location :='>
        This is the Location path returned by the RD as a result of a successful
group registration.</t>
      </list>
  </t>
</list></t>

<t>The following responses codes are defined for this interface:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.02 “Deleted” upon successful deletion</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  4.04 “Not Found”. Group does not exist.</t>
  <t hangText='Failure:'>
  5.03 “Service Unavailable”. Service could not perform the operation.</t>
</list></t>

<t>The following examples shows successful removal of the group from the RD.</t>

<figure align="left"><artwork><![CDATA[
    EP                                                RD
     |                                                 |
     | --- DELETE /rd-group/412  ------------------->  |
     |                                                 |
     |                                                 |
     | <-- 2.02 Deleted  ----------------------------  |
     |                                                 |
]]></artwork></figure>

<figure align="left"><artwork><![CDATA[
Req: DELETE /rd-group/12

Res: 2.02 Deleted
]]></artwork></figure>

</section>
</section>
<section anchor="lookup" title="RD Lookup Function Set">

<t>In order for an RD to be used for discovering resources registered with it,
a lookup interface can be provided using this function set. This lookup interface
is defined as a default, and it is assumed that RDs may also support lookups
to return resource descriptions in alternative formats (e.g. Atom or HTML
Link) or using more advanced interfaces (e.g. supporting context or semantic
based lookup).</t>

<t>This function set allows lookups for domains, groups, endpoints and resources
using attributes defined in the RD Function Set and for use with the CoRE
Link Format. The result of a lookup request is the list of links (if any)
corresponding to the type of lookup.  Using the Accept Option, the requester
can control whether this list is returned in CoRE Link Format
(<spanx style="verb">application/link-format</spanx>, default) or its JSON form
(<spanx style="verb">application/link-format+json</spanx>).  The target of these links SHOULD be the
actual location of the domain, endpoint or resource, but MAY be an
intermediate proxy e.g. in the case of an HTTP lookup interface for CoAP
endpoints. Multiple query parameters MAY be included in a lookup, all
included parameters MUST match for a resource to be returned.  The character
‘*’ MAY be included at the end of a parameter value as a wildcard operator.</t>

<t>The lookup interface is specified as follows:</t>

<t><list style="hanging">
  <t hangText='Interaction:'>
  Client -&gt; RD</t>
  <t hangText='Method:'>
  GET</t>
  <t hangText='URI Template:'>
  /{+rd-lookup-base}/{lookup-type}{?d,ep,gp,et,rt,page,count,resource-param}</t>
  <t hangText='URI Template Variables:'>
        <list style="hanging">
        <t hangText='rd-lookup-base :='>
        RD Lookup Function Set path (mandatory). This is the path of the RD Lookup
Function Set. An RD SHOULD use the value “rd-lookup” for this variable whenever
possible.</t>
        <t hangText='lookup-type :='>
        (“d”, “ep”, “res”, “gp”) (mandatory) This variable is used to select the
kind of lookup to perform (domain, endpoint, resource, or group).</t>
        <t hangText='ep :='>
        Endpoint (optional). Used for endpoint, group and resource lookups.</t>
        <t hangText='d :='>
        Domain (optional). Used for domain, group, endpoint and resource lookups.</t>
        <t hangText='page :='>
        Page (optional). Parameter can not be used without the count
parameter. Results are returned from result set in pages that contains
‘count’ results starting from index (page * count).</t>
        <t hangText='count :='>
        Count (optional). Number of results is limited to this parameter value. If
the parameter is not present, then an RD implementation specific default
value SHOULD be used.</t>
        <t hangText='rt :='>
        Resource type (optional). Used for group, endpoint and resource lookups.</t>
        <t hangText='et :='>
        Endpoint type (optional). Used for group, endpoint and resource lookups.</t>
        <t hangText='resource-param :='>
        Link attribute parameters (optional). Any link attribute as defined in Section
4.1 of <xref target="RFC6690"/>, used for resource lookups.</t>
      </list>
  </t>
</list></t>

<t>The following responses codes are defined for this interface:</t>

<t><list style="hanging">
  <t hangText='Success:'>
  2.05 “Content” with an <spanx style="verb">application/link-format</spanx> or
<spanx style="verb">application/link-format+json</spanx> payload containing a matching entries for
the lookup.</t>
  <t hangText='Failure:'>
  4.04 “Not Found” in case no matching entry is found for a unicast request.</t>
  <t hangText='Failure:'>
  No error response to a multicast request.</t>
  <t hangText='Failure:'>
  4.00 “Bad Request”. Malformed request.</t>
  <t hangText='Failure:'>
  5.03 “Service Unavailable”. Service could not perform the operation.</t>
</list></t>

<t>The following example shows a client performing a resource lookup:</t>

<figure align="left"><artwork><![CDATA[
   Client                                                          RD
     |                                                             |
     | ----- GET /rd-lookup/res?rt=temperature ----------------->  |
     |                                                             |
     |                                                             |
     | <-- 2.05 Content <coap://{host:port}/temp>;rt="temperature" |
     |                                                             |
]]></artwork></figure>

<figure align="left"><artwork><![CDATA[
Req: GET /rd-lookup/res?rt=temperature

Res: 2.05 Content
<coap://{host:port}/temp>;rt="temperature"
]]></artwork></figure>

<t>The following example shows a client performing an endpoint type lookup:</t>

<figure align="left"><artwork><![CDATA[
   Client                                                          RD
     |                                                             |
     | ----- GET /rd-lookup/ep?et=power-node --------------------> |
     |                                                             |
     |                                                             |
     | <-- 2.05 Content <coap://{ip:port}>;ep="node5" ------------ |
     |                                                             |
]]></artwork></figure>

<figure align="left"><artwork><![CDATA[
Req: GET /rd-lookup/ep?et=power-node

Res: 2.05 Content
<coap://{ip:port}>;ep="node5",
<coap://{ip:port}>;ep="node7"
]]></artwork></figure>

<t>The following example shows a client performing a domain lookup:</t>

<figure align="left"><artwork><![CDATA[
   Client                                                          RD
     |                                                             |
     | ----- GET /rd-lookup/d ---------------------------------->  |
     |                                                             |
     |                                                             |
     | <-- 2.05 Content </rd>;d=domain1,</rd>;d=domain2 ---------- |
     |                                                             |
]]></artwork></figure>

<figure align="left"><artwork><![CDATA[
Req: GET /rd-lookup/d

Res: 2.05 Content
</rd>;d="domain1",
</rd>;d="domain2"
]]></artwork></figure>

<t>The following example shows a client performing a group lookup for all groups:</t>

<figure align="left"><artwork><![CDATA[
   Client                                                          RD
     |                                                             |
     | ----- GET /rd-lookup/gp --------------------------------->  |
     |                                                             |
     |                                                             |
     | <-- 2.05 Content </rd-group/12>;gp="lights1"; ------------- |
     |                               d="example.com" ------------- |
     |                                                             |
]]></artwork></figure>

<figure align="left"><artwork><![CDATA[
Req: GET /rd-lookup/gp

Res: 2.05 Content
</rd-group/12>;gp="lights1";d="example.com"
]]></artwork></figure>

<t>The following example shows a client performing a lookup for all endpoints
in a particular group:</t>

<figure align="left"><artwork><![CDATA[
   Client                                                          RD
     |                                                             |
     | ----- GET /rd-lookup/ep?gp=lights1----------------------->  |
     |                                                             |
     |                                                             |
     | <-- 2.05 Content <coap://{host:port}>;ep="node1" ---------- |
     |                                                             |
]]></artwork></figure>

<figure align="left"><artwork><![CDATA[
Req: GET /rd-lookup/ep?gp=lights1

Res: 2.05 Content
<coap://{host:port}>;ep="node1",
<coap://{host:port}>;ep="node2",
]]></artwork></figure>

<t>The following example shows a client performing a lookup for all groups an
endpoint belongs to:</t>

<figure align="left"><artwork><![CDATA[
   Client                                                          RD
     |                                                             |
     | ----- GET /rd-lookup/gp?ep=node1 ------------------------>  |
     |                                                             |
     |                                                             |
     | <-- 2.05 Content <coap://{ip:port}>;gp="lights1";ep="node1" |
     |                                                             |
]]></artwork></figure>

<figure align="left"><artwork><![CDATA[
Req: GET /rd-lookup/gp?ep=node1

Res: 2.05 Content
<coap://{ip:port}>;gp="lights1";ep="node1",
]]></artwork></figure>

</section>
<section anchor="attributes" title="New Link-Format Attributes">

<t>When using the CoRE Link Format to describe resources being discovered by
or posted to a resource directory service, additional information about those
resources is useful. This specification defines the following new attributes
for use in the CoRE Link Format <xref target="RFC6690"/>:</t>

<figure><artwork><![CDATA[
   link-extension    = ( "ins" "=" quoted-string ) ; Max 63 bytes
   link-extension    = ( "exp" )
]]></artwork></figure>

<section anchor="resource-instance-attribute-ins" title="Resource Instance attribute ‘ins’">

<t>The Resource Instance “ins” attribute is an
identifier for this resource, which makes it possible
to distinguish it from other similar resources. This attribute is similar
in use to the &lt;Instance&gt; portion of a DNS-SD record (see <xref target="cheshire"/>, and SHOULD be unique across resources with the same Resource Type attribute
in the domain it is used. A Resource Instance might be a descriptive string
like “Ceiling Light, Room 3”, a short ID like “AF39” or a unique UUID or
iNumber. This attribute is used by a Resource Directory to distinguish between
multiple instances of the same resource type within the directory.</t>

<t>This attribute MUST be no more than 63 bytes in length. The resource identifier
attribute MUST NOT appear more than once in a link description.</t>

</section>
<section anchor="export-attribute-exp" title="Export attribute ‘exp’">

<t>The Export “exp” attribute is used as a flag to indicate that a link description
MAY be exported by a resource directory to external directories.</t>

<t>The CoRE Link Format is used for many purposes between CoAP endpoints. Some
are useful mainly locally, for example checking the observability of a resource
before accessing it, determining the size of a resource, or traversing dynamic
resource structures. However, other links are very useful to be exported
to other directories, for example the entry point resource to a functional
service.</t>

</section>
</section>
<section anchor="dns-sd" title="DNS-SD Mapping">

<t>CoRE Resource
Discovery is intended to support fine-grained discovery of hosted
resources, their attributes, and possibly other resource relations <xref target="RFC6690"/>. In contrast, service discovery generally refers to a coarse-grained
resolution of an endpoint’s IP address, port number, and protocol.</t>

<t>Resource and service discovery are complementary in the case of large
networks, where the latter can facilitate scaling.  This document
defines a mapping between CoRE Link Format attributes and DNS-Based
Service Discovery <xref target="RFC6763"/> fields that permits
discovery of CoAP services by either means.</t>

<section anchor="cheshire" title="DNS-based Service discovery">

<t>DNS-Based Service Discovery (DNS-SD) defines a conventional method of
configuring DNS PTR, SRV, and TXT resource records to facilitate
discovery of services (such as CoAP servers in a subdomain) using the
existing DNS infrastructure.  This section gives a brief overview of
DNS-SD; see <xref target="RFC6763"/> for a detailed
specification.</t>

<t>DNS-SD service names are limited to 255 octets and are of the form:</t>

<t>Service Name = &lt;Instance&gt;.&lt;ServiceType&gt;.&lt;Domain&gt;.</t>

<t>The service name is the label of SRV/TXT resource records. The SRV RR specifies
the host and the port of the endpoint. The TXT RR provides additional information.</t>

<t>The &lt;Domain&gt; part of the service name is identical to the global (DNS
subdomain) part of the authority in URIs that identify servers or groups
of servers.</t>

<t>The &lt;ServiceType&gt; part is composed of at least two labels.  The first
label of the pair is the application protocol name <xref target="RFC6335"/> preceded by an
underscore character.  The second label indicates the transport and is always
“_udp” for UDP-based CoAP services.  In cases where narrowing the scope of
the search may be useful, these labels may be optionally preceded by a
subtype name followed by the “_sub” label.  An example of this more specific
&lt;ServiceType&gt; is “lamp._sub._dali._udp”.</t>

<t>The default &lt;Instance&gt; part of the service name may be set at the factory
or during the commissioning process.  It SHOULD uniquely identify an instance
of &lt;ServiceType&gt; within a &lt;Domain&gt;.  Taken together, these three
elements comprise a unique name for an SRV/ TXT record pair within the DNS
subdomain.</t>

<t>The granularity of a service name MAY be that of a host or group, or it could
represent a particular resource within a CoAP server.  The SRV record
contains the host name (AAAA record name) and port of the service while
protocol is part of the service name.  In the case where a service name
identifies a particular resource, the path part of the URI must be carried in
a corresponding TXT record.</t>

<t>A DNS TXT record is in practice limited to a few hundred octets in length,
which is indicated in the resource record header in the DNS response message.
The data consists of one or more strings comprising a key=value pair.  By
convention, the first pair is txtver=&lt;number&gt; (to support different
versions of a service description).</t>

</section>
<section anchor="ins" title="mapping ins to &lt;Instance&gt;">

<t>The Resource Instance “ins” attribute maps to the &lt;Instance&gt; part of a
DNS-SD service name.  It is stored directly in the DNS as a single DNS label
of canonical precomposed UTF-8 <xref target="RFC3629"/> “Net-Unicode” (Unicode
Normalization Form C) <xref target="RFC5198"/> text.  However, to the extent that the
“ins” attribute may be chosen to match the DNS host name of a service, it
SHOULD use the syntax defined in Section 3.5 of <xref target="RFC1034"/> and Section 2.1
of <xref target="RFC1123"/>.</t>

<t>The &lt;Instance&gt; part of the name of a service being offered on the network
SHOULD be configurable by the user setting up the service, so that he or she
may give it an informative name.  However, the device or service SHOULD NOT
require the user to configure a name before it can be used.  A sensible
choice of default name can allow the device or service to be accessed in many
cases without any manual configuration at all.  The default name should be
short and descriptive, and MAY include a collision-resistant substring such
as the lower bits of the device’s MAC address, serial number, fingerprint, or
other identifier in an attempt to make the name relatively unique.</t>

<t>DNS labels are currently limited to 63 octets in length and the
entire service name may not exceed 255 octets.</t>

</section>
<section anchor="exp" title="Mapping rt to &lt;ServiceType&gt;">

<t>The resource type “rt” attribute is mapped into the &lt;ServiceType&gt; part of
a DNS-SD service name and SHOULD conform to the reg-rel-type production of
the Link Format defined in Section 2 of <xref target="RFC6690"/>.  The “rt” attribute MUST
be composed of at least a single Net-Unicode text string, without underscore
‘_’ or period ‘.’ and limited to 15 octets in length, which represents the
application protocol name.  This string is mapped to the DNS-SD
&lt;ServiceType&gt; by prepending an underscore and appending a period followed
by the “_udp” label.  For example, rt=”dali” is mapped into “_dali._udp”.</t>

<t>The application protocol name may be optionally followed by a period
and a service subtype name consisting of a Net-Unicode text string,
without underscore or period and limited to 63 octets.  This string
is mapped to the DNS-SD &lt;ServiceType&gt; by appending a period followed
by the “_sub” label and then appending a period followed by the
service type label pair derived as in the previous paragraph.  For
example, rt=”dali.light” is mapped into “light._sub._dali._udp”.</t>

<t>The resulting string is used to form labels for DNS-SD records which
are stored directly in the DNS.</t>

</section>
<section anchor="domain" title="Domain mapping">

<t>DNS domains may be derived from the “d” attribute. The domain attribute may
be suffixed with the zone name of the authoritative DNS server to generate
the domain name. The “ep” attribute is prefixed to the domain name to generate
the FQDN to be stored into DNS with an AAAA RR.</t>

</section>
<section anchor="TXT" title="TXT Record key=value strings">

<t>A number of <xref target="RFC6763"/> key/value pairs are derived from link-format
information, to be exported in the DNS-SD as key=value strings in a
TXT record (<xref target="RFC6763"/>, Section 6.3).</t>

<t>The resource &lt;URI&gt; is exported as key/value pair “path=&lt;URI&gt;”.</t>

<t>The Interface Description “if” attribute is exported as key/value
pair “if=&lt;Interface Description&gt;”.</t>

<t>The DNS TXT record can be further populated by importing any other
resource description attributes as they share the same key=value
format specified in Section 6 of <xref target="RFC6763"/>.</t>

</section>
<section anchor="import" title="Importing resource links into DNS-SD">

<t>Assuming the ability to query a Resource Directory or multicast a GET
(?exp) over the local link, CoAP resource discovery may be used to
populate the DNS-SD database in an automated fashion.  CoAP resource
descriptions (links) can be exported to DNS-SD for exposure to
service discovery by using the Resource Instance attribute as the
basis for a unique service name, composed with the Resource Type as
the &lt;ServiceType&gt;, and registered in the correct &lt;Domain&gt;.  The agent
responsible for exporting records to the DNS
zone file SHOULD be authenticated to the DNS server.
The following example shows an agent discovering a resource to be
exported:</t>

<figure align="left"><artwork><![CDATA[
    Agent                                                          RD
      |                                                             |
      | --- GET /rd-lookup/res?exp ------------------------------>  |
      |                                                             |
      |                                                             |
      | <-- 2.05 Content "<coap://[FDFD::1234]:61616/light/1>;exp;  |
      |                   rt="dali.light";ins="FrontSpot"           |
      |                   d="office";ep="node1"                     |
      |                                                             |
]]></artwork></figure>

<figure align="left"><artwork><![CDATA[
   Req: GET /rd-lookup/res?exp

   Res: 2.05 Content
   <coap://[FDFD::1234]:61616/light/1>;
     exp;rt="dali.light";ins="Spot";
               d="office"; ep="node1"

]]></artwork></figure>

<t>The agent subsequently registers the following DNS-SD RRs, assuming a zone
name “example.com” prefixed with “office”:</t>

<figure align="left"><artwork><![CDATA[
node1.office.example.com.          IN AAAA        FDFD::1234
_dali._udp.office.example.com      IN PTR
                          Spot._dali._udp.office.example.com
light._sub._dali._udp.example.com  IN PTR
                          Spot._dali._udp.office.example.com
Spot._dali._udp.office.example.com IN SRV  0 0 5678
                          node1.office.example.com.
Spot._dali._udp.office.example.com IN TXT
                          txtver=1;path=/light/1
]]></artwork></figure>

<t>In the above figure the Service Name is chosen as Spot._dali._udp.office.example.com
without the light._sub service prefix. An alternative Service Name would
be: Spot.light._sub._dali._udp.office.example.com.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>The security considerations as described in Section 7 of <xref target="RFC5988"/> and
Section 6 of <xref target="RFC6690"/> apply. The <spanx style="verb">/.well-known/core</spanx> resource may be
protected e.g. using DTLS when hosted on a CoAP server as described in
<xref target="RFC7252"/>. DTLS or TLS based security SHOULD be used on all resource
directory interfaces defined in this document (TODO: Improve the exact DTLS
or TLS security requirements and references).</t>

<section anchor="endpoint_identification" title="Endpoint Identification and Authentication">

<t>An Endpoint is determined to be unique by an RD by the Endpoint identifier
parameter included during Registration, and any associated TLS or DTLS security
bindings. An Endpoint MUST NOT be identified by its protocol, port or IP
address as these may change over the lifetime of an Endpoint.</t>

<t>Every operation performed by an Endpoint or Client on a resource directory
SHOULD be mutually authenticated using Pre-Shared Key, Raw Public Key or
Certificate based security. Endpoints using a Certificate MUST include the
Endpoint identifier as the Subject of the Certificate, and this identifier
MUST be checked by a resource directory to match the Endpoint identifier
included in the Registration message.</t>

</section>
<section anchor="access-control" title="Access Control">

<t>Access control SHOULD be performed separately for the RD Function Set and
the RD Lookup Function Set, as different endpoints may be authorized to register
with an RD from those authorized to lookup endpoints from the RD. Such access
control SHOULD be performed in as fine-grained a level as possible. For example
access control for lookups could be performed either at the domain, endpoint
or resource level.</t>

</section>
<section anchor="denial-of-service-attacks" title="Denial of Service Attacks">

<t>Services that run over UDP unprotected are vulnerable to unknowingly
become part of a DDoS attack as UDP does not require return
routability check. Therefore, an attacker can easily spoof the source
IP of the target entity and send requests to such a service which
would then respond to the target entity. This can be used for
large-scale DDoS attacks on the target. Especially, if the service
returns a response that is order of magnitudes larger than the
request, the situation becomes even worse as now the attack can be
amplified. DNS servers have been widely used for DDoS amplification
attacks. Recently, it has been observed that NTP Servers, that also
run on unprotected UDP have been used for DDoS attacks
(http://tools.cisco.com/security/center/content/CiscoSecurityNotice/CVE-2013-5211)
[TODO: Ref, and cut down the verbiage, as this is already discussed in
RFC 7252] since there is no return routability check and can have a large
amplification factor. The responses from the NTP server were found to be
19 times larger than the request. A Resource Directory (RD) which responds
to wild-card lookups is potentially vulnerable if run with CoAP over UDP.
Since there is no return routability check and the responses can be significantly
larger than requests, RDs can unknowingly become part of a DDoS amplification
attack. Therefore, it is RECOMMENDED that implementations ensure return routability.
This can be done, for example by responding to wild card lookups only over
DTLS or TLS or TCP.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="iana-rt" title="Resource Types">

<t>“core.rd”, “core.rd-group” and “core.rd-lookup” resource types need to be
registered with the resource type registry defined by <xref target="RFC6690"/>.</t>

</section>
<section anchor="iana-link-ext" title="Link Extension">

<t>The “exp” attribute needs to be registered when a future Web Linking link-extension
registry is created (e.g. in RFC5988bis).</t>

</section>
<section anchor="iana-registry" title="RD Parameter Registry">

<t>This specification defines a new sub-registry for registration and lookup
parameters called “RD Parameters” under “CoRE Parameters”. Although this
specification defines a basic set of parameters, it is expected that other
standards that make use of this interface will define new ones.</t>

<t>Each entry in the registry must include the human readable name of the parameter,
the query parameter, validity requirements if any and a description. The
query parameter MUST be a valid URI query key <xref target="RFC3986"/>.</t>

<t>Initial entries in this sub-registry are as follows:</t>

<texttable title="RD Parameters" anchor="tab-registry">
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>Query</ttcol>
      <ttcol align='left'>Validity</ttcol>
      <ttcol align='left'>Description</ttcol>
      <c>Endpoint Name</c>
      <c>ep</c>
      <c>&#160;</c>
      <c>Name of the endpoint</c>
      <c>Lifetime</c>
      <c>lt</c>
      <c>60-4294967295</c>
      <c>Lifetime of the registration in seconds</c>
      <c>Domain</c>
      <c>d</c>
      <c>&#160;</c>
      <c>Domain to which this endpoint belongs</c>
      <c>Endpoint Type</c>
      <c>et</c>
      <c>&#160;</c>
      <c>Semantic name of the endpoint</c>
      <c>Context</c>
      <c>con</c>
      <c>URI</c>
      <c>The scheme, address and port at which this server is available</c>
      <c>Endpoint Name</c>
      <c>ep</c>
      <c>&#160;</c>
      <c>Name of the endpoint, max 63 bytes</c>
      <c>Group Name</c>
      <c>gp</c>
      <c>&#160;</c>
      <c>Name of a group in the RD</c>
      <c>Page</c>
      <c>page</c>
      <c>Integer</c>
      <c>Used for pagination</c>
      <c>Count</c>
      <c>count</c>
      <c>Integer</c>
      <c>Used for pagination</c>
</texttable>

<t>The IANA policy for future additions to the sub-registry is “Expert Review”
as described in <xref target="RFC5226"/>.</t>

</section>
</section>
<section anchor="examples" title="Examples">

<t>Examples are added here.</t>

<section anchor="lt-ex" title="Lighting Installation">

<t>This example shows a simplified lighting installation which makes use of
the Resource Directory (RD) to facilitate the installation and start up of
the application code in the lights and sensors. In particular, the example
leads to the definition of a group and the enabling of the corresponding
multicast address. No conclusions must be drawn on the realization of actual
installation procedures, because the example “emphasizes” some of the issues
that may influence the use of the RD.</t>

<section anchor="lt-in-ch" title="Installation Characteristics">

<t>The example assumes that the installation is managed. That means that a Commissioning
Tool (CT) is used to authorize the addition of nodes, name them, and name
their services. The CT can be connected to the installation in many ways:
the CT can be part of the installation network, connected by wifi to the
installation network, or connected via GPRS link, or other method.</t>

<t>It is assumed that there are two naming authorities for the installation:
(1) the network manager that is responsible for the correct operation of
the network and the connected interfaces, and (2) the lighting manager that
is responsible for the correct functioning of networked lights and sensors.
The result is the existence of two naming schemes coming from the two managing
entities.</t>

<t>The example installation consists of one presence sensor, and two luminaries,
luminary1 and luminary2, each with their own wireless interface. Each luminary
contains three lamps: left, right and middle. Each luminary is accessible
through one end-point. For each lamp a resource exists to modify the settings
of a lamp in a luminary. The purpose of the installation is that the presence
sensor notifies the presence of persons to a group of lamps. The group of
lamps consists of: middle and left lamps of luminary1 and right lamp of luminary2.</t>

<t>Before commissioning by the lighting manager, the network is installed and
access to the interfaces is proven to work by the network manager. Following
the lay-out of cables and routers the network manager has defined DNS domains.
The presence sensor and luminary1 are part of DNS
domain: rtr_5612_rrt.example.com and luminary2 is part of rtr_7899_pfa.example.com.
The names of luminary1- luminary2-, and sensor- interfaces are respectively:
lm_12-345-678, lm_12-456-378, and sn_12-345-781. These names are stored in
DNS together with their IP addresses. The FQDN of the interfaces is shown
in <xref target="interface-F"/> below:</t>

<texttable title="interface FQDNs" anchor="interface-F">
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>FQDN</ttcol>
      <c>luminary1</c>
      <c>lm_12-345-678.rtr_5612_rrt.example.com</c>
      <c>luminary2</c>
      <c>lm_12-456-378.rtr_7899_pfa.example.com</c>
      <c>Presence sensor</c>
      <c>sn_12-345-781.rtr_5612_rrt.example.com</c>
      <c>Resource directory</c>
      <c>pc_123456.rtr_5612_rrt.example.com</c>
</texttable>

<t>At the moment of installation, the network under installation is not necessarily
connected to the DNS infra structure. Therefore, SLAAC IPv6 addresses are
assigned to CT, RD, luminaries and sensor shown in <xref target="interface-S"/> below:</t>

<texttable title="interface SLAAC addresses" anchor="interface-S">
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>IPv6 address</ttcol>
      <c>luminary1</c>
      <c>FDFD::ABCD:1</c>
      <c>luminary2</c>
      <c>FDFD::ABCD:2</c>
      <c>Presence sensor</c>
      <c>FDFD::ABCD:3</c>
      <c>Resource directory</c>
      <c>FDFD::ABCD:0</c>
</texttable>

<t>In <xref target="rd-en"/> the use of resource directory during installation is presented. In <xref target="dns-en"/> the connection to DNS is discussed.</t>

</section>
<section anchor="rd-en" title="RD entries">

<t>It is assumed that access to the DNS infrastructure is not always possible
during installation. Therefore, the SLAAC addresses are used in this section.</t>

<t>For discovery, the resource types (rt) of the devices are important. The
lamps in the luminaries have rt: light, and the presence sensor has rt: p-sensor.
The end-points have names which are relevant to the light installation manager.
In this case luminary1, luminary2, and the presence sensor are located in
room 2-4-015, where luminary1 is located at the window and luminary2 and
the presence sensor are located at the door. The end-point names reflect
this physical location. The middle, left and right lamps are accessed via
path /light/middle, /light/left, and /light/right respectively. The identifiers
relevant to the Resource Directory are shown in <xref target="end-point"/> below:</t>

<texttable title="Resource Directory identifiers" anchor="end-point">
      <ttcol align='left'>Name</ttcol>
      <ttcol align='left'>end-point</ttcol>
      <ttcol align='left'>resource path</ttcol>
      <ttcol align='left'>resource type</ttcol>
      <c>luminary1</c>
      <c>lm_R2-4-015_wndw</c>
      <c>/light/left</c>
      <c>light</c>
      <c>luminary1</c>
      <c>lm_R2-4-015_wndw</c>
      <c>/light/middle</c>
      <c>light</c>
      <c>luminary1</c>
      <c>lm_R2-4-015_wndw</c>
      <c>/light/right</c>
      <c>light</c>
      <c>luminary2</c>
      <c>lm_R2-4-015_door</c>
      <c>/light/left</c>
      <c>light</c>
      <c>luminary2</c>
      <c>lm_R2-4-015_door</c>
      <c>/light/middle</c>
      <c>light</c>
      <c>luminary2</c>
      <c>lm_R2-4-015_door</c>
      <c>/light/right</c>
      <c>light</c>
      <c>Presence sensor</c>
      <c>ps_R2-4-015_door</c>
      <c>/ps</c>
      <c>p-sensor</c>
</texttable>

<t>The CT inserts the end-points of the luminaries and the sensor in the RD
using the Context parameter (con) to specify the interface address:</t>

<figure align="left"><artwork><![CDATA[
Req: POST
 coap://[FDFD::ABCD:0]/rd?ep=lm_R2-4-015_wndw
Payload:
</light/left>;rt="light";
  con="FDFD::ABCD:1";
  d="R2-4-015"; ins="lamp4444"; exp,
</light/middle>;rt="light";
  con="FDFD::ABCD:1";
  d="R2-4-015"; ins="lamp5555"; exp,
</light/right>;rt="light";
  con="FDFD::ABCD:1";
  d="R2-4-015"; ins="lamp6666"; exp

Res: 2.01 Created
Location: /rd/4521
]]></artwork></figure>

<figure align="left"><artwork><![CDATA[
Req: POST coap://[FDFD::ABCD:0]/rd?ep=lm_R2-4-015_door
Payload:
</light/left>;rt="light";
  con="FDFD::ABCD:2";
  d="R2-4-015"; ins="lamp1111"; exp,
</light/middle>;rt="light";
  con="FDFD::ABCD:2";
  d="R2-4-015"; ins="lamp2222"; exp,
</light/right>;rt="light";
  con="FDFD::ABCD:2";
  d="R2-4-015"; ins="lamp3333"; exp

Res: 2.01 Created
Location: /rd/4522
]]></artwork></figure>

<figure align="left"><artwork><![CDATA[
Req: POST coap://[FDFD::ABCD:0]/rd?ep=ps_R2-4-015_door
Payload:
</ps>;rt="p-sensor";
  con="FDFD::ABCD:3";
  d="R2-4-015"; ins="pres1234"; exp

Res: 2.01 Created
Location: /rd/4523
]]></artwork></figure>

<t>The domain name d=”R2-4-015” has been added for an efficient lookup because
filtering on “ep” name is awkward. The same domain name is communicated to
the two luminaries and the presence sensor by the CT. The “exp” attribute
is set for the later administration in DNS of the instance name ins=”lampxxxx”.</t>

<t>Once the individual endpoints are registered, the group needs to be registered.
Because the presence sensor sends one multicast message to the luminaries,
all lamps in the group need to have an identical path. This path is created
on the two luminaries using the batch command defined in <xref target="I-D.ietf-core-interfaces"/>. The path to a batch of lamps is defined as: /light/grp1. In the example
below, two endpoints are updated with an additional resource using the path
/light/grp1 on the two luminaries.</t>

<figure align="left"><artwork><![CDATA[
Req: POST
 coap://[FDFD::ABCD:1]/light/grp1
 (content-type:application/link-format)light/middle, light/left

Res: 2.04 Changed

Req: POST
 coap://[FDFD::ABCD:2]/light/grp1
(content-type:application/link-format)light/right

Res: 2.04 Changed
]]></artwork></figure>

<t>The group is specified in the RD. The Context parameter is set to the site-local
multicast address allocated to the group.
In the POST in the example below, these two end-points and the end-point
of the presence sensor are registered as members of the group.</t>

<t>It is expected that Standards Developing Organization (SDO) may develop other
special purpose protocols to specify additional group links, group membership,
group names and other parameters in the individual nodes.</t>

<figure align="left"><artwork><![CDATA[
Req: POST coap://[FDFD::ABCD:0]/rd-group
?gp=grp_R2-4-015;con="FF05::1";exp; ins="grp1234"
Payload:
<>ep=lm_R2-4-015_wndw,
<>ep=lm_R2-4-015_door,
<>ep=ps_R2-4-015_door

Res: 2.01 Created
Location: /rd-group/501
]]></artwork></figure>

<t>After the filling of the RD by the CT, the application in the luminaries
can learn to which groups they belong, and enable their interface for the
multicast address.</t>

<t>The luminary, knowing its domain, queries the RD for the end-point with rt=light
and d=R2-4-015. The RD returns all end-points in the domain.</t>

<figure align="left"><artwork><![CDATA[
Req: GET coap://[FDFD::ABCD:0]/rd-lookup/ep
  ?d=R2-4-015; rt=light

Res: 2.05 Content
<coap://[FDFD::ABCD:1]>;
  ep="lm_R2-4-015_wndw",
<coap://[FDFD::ABCD:2]>;
   ep="lm_R2-4-015_door"
]]></artwork></figure>

<t>Knowing its own IPv6 address, the luminary discovers its endpoint name. With
the end-point name the luminary queries the RD for all groups to which the
end-point belongs.</t>

<figure align="left"><artwork><![CDATA[
Req: GET coap://[FDFD::ABCD:0]/rd-lookup/gp
  ?ep=lm_R2-4-015_wndw

Res: 2.05 Content
</rd-group/501;gp="grp_R2-4-015";con="FF05::1"
]]></artwork></figure>

<t>From the context parameter value, the luminary learns the multicast address
of the multicast group.</t>

<t>Alternatively, the CT can communicate the multicast address directly to the
luminaries by using the “coap-group” resource specified in <xref target="RFC7390"/>.</t>

<!-- XXX: the following isn't JSON -->

<figure align="left"><artwork><![CDATA[
Req: POST //[FDFD::ABCD:1]/coap-group
          Content-Format: application/coap-group+json
       { "a": "[FF05::1]" }
       { "n": "grp_R2-4-015"}

Res: 2.01 Created
Location-Path: /coap-group/1
]]></artwork></figure>

<t>Dependent on the situation only the address ,”a”, or the name, “n”, is specified
in the coap-group resource. Instead of the RD group name also the DNS group
name can be used.</t>

</section>
<section anchor="dns-en" title="DNS entries">

<t>The network manager assigns the domain bc.example.com to the entries coming
from the RD.
The agent that looks up the resource directory uses the domain name bc.example.com
as prescribed, to enter the services and hosts into the DNS.</t>

<t>The agent does a lookup as specified in <xref target="import"/>. The RD returns all entries annotated with “exp”. The agent subsequently
registers the following DNS-SD RRs:</t>

<figure align="left"><artwork><![CDATA[
lm_R2-4-015_wndw.bc.example.com.        IN AAAA      FDFD::ABCD:1
lm_R2-4-015_door.bc.example.com.        IN AAAA      FDFD::ABCD:2
ps_R2-4-015_door.bc.example.com.        IN AAAA      FDFD::ABCD:3
_light._udp.bc.example.com              IN PTR
                           lamp1111._light._udp.bc.example.com
_light._udp.bc.example.com              IN PTR
                           lamp2222._light._udp.bc.example.com
_light._udp.bc.example.com              IN PTR
                           lamp3333._light._udp.bc.example.com
_light._udp.bc.example.com              IN PTR
                           lamp4444._light._udp.bc.example.com
_light._udp.bc.example.com              IN PTR
                           lamp5555._light._udp.bc.example.com
_light._udp.bc.example.com              IN PTR
                           lamp6666._light._udp.bc.example.com
_p-sensor._udp.bc.example.com           IN PTR
                       pres12324._p-sensor._udp.bc.example.com
lamp1111._light._udp.bc.example.com     IN SRV  0 0 5678
                              lm_R2-4-015_door.bc.example.com.
lamp1111._light._udp.bc.example.com     IN TXT
                                     txtver=1;path=/light/left
lamp2222._light._udp.bc.example.com     IN SRV  0 0 5678
                              lm_R2-4-015_door.bc.example.com.
lamp2222._light._udp.bc.example.com     IN TXT
                                   txtver=1;path=/light/middle
lamp3333._light._udp.bc.example.com     IN SRV  0 0 5678
                              lm_R2-4-015_door.bc.example.com.
lamp3333._light._udp.bc.example.com     IN TXT
                                    txtver=1;path=/light/right
lamp4444._light._udp.bc.example.com     IN SRV  0 0 5678
                              lm_R2-4-015_wndw.bc.example.com.
lamp4444._light._udp.bc.example.com     IN TXT
                                     txtver=1;path=/light/left
lamp5555._light._udp.bc.example.com     IN SRV  0 0 5678
                              lm_R2-4-015_wndw.bc.example.com.
lamp5555._light._udp.bc.example.com     IN TXT
                                   txtver=1;path=/light/middle
lamp6666._light._udp.bc.example.com     IN SRV  0 0 5678
                              lm_R2-4-015_wndw.bc.example.com.
lamp6666._light._udp.bc.example.com     IN TXT
                                    txtver=1;path=/light/right
pres1234._p-sensor._udp.bc.example.com  IN SRV  0 0 5678
                              ps_R2-4-015_door.bc.example.com.
pres1234._p-sensor._udp.bc.example.com  IN TXT
                                             txtver=1;path=/ps
]]></artwork></figure>

<t>To ask for all lamps is equivalent to returning all PTR RR with label _light.udp.bc.example.com.
from the DNS. When it is required to filter on the rd=R2-4-015 value in the
DNS, additional PTR RRs have to be entered into the DNS.</t>

<figure align="left"><artwork><![CDATA[
R2-4-015._light._udp.bc.example.com              IN PTR
                           lamp1111._light._udp.bc.example.com
R2-4-015._light._udp.bc.example.com              IN PTR
                           lamp2222._light._udp.bc.example.com
R2-4-015._light._udp.bc.example.com              IN PTR
                           lamp3333._light._udp.bc.example.com
R2-4-015._light._udp.bc.example.com              IN PTR
                           lamp4444._light._udp.bc.example.com
R2-4-015._light._udp.bc.example.com              IN PTR
                           lamp5555._light._udp.bc.example.com
R2-4-015._light._udp.bc.example.com              IN PTR
                           lamp6666._light._udp.bc.example.com
]]></artwork></figure>

<t>Returning all PTR RRs with label R2-4-015._light._udp.bc.example.com provides
all service instances within the domain R2-4-015. This filtering can be handy
when there are many rooms. In the example there is only one room, making
the filtering superfluous.</t>

<t>The agent can also discover groups that need to be discovered. It queries
RD to return all groups which are exported.</t>

<figure align="left"><artwork><![CDATA[
   Req: GET /rd-lookup/gp?exp

   Res: 2.05 Content
   <coap://[FF05::1]/>; exp; gp="grp_R2-4-015; ins="grp1234";
ep="lm_R2-4-015_wndw";
ep="lm_R2-4-015_door

]]></artwork></figure>

<t>The group with FQDN grp_R2-4-015.bc.example.com can be entered into the DNS
by the agent. The accompanying instance name is grp1234. The &lt;ServiceType&gt;
is chosen to be _group._udp. The agent enters the following RRs into the
DNS.</t>

<figure align="left"><artwork><![CDATA[
grp_R2-4-015.bc.example.com.        IN AAAA            FF05::1
_group._udp.bc.example.com          IN PTR
                            grp1234._group._udp.bc.example.com
grp1234._group._udp.bc.example.com  IN SRV  0 0 5678
                             grp_R2-4-015_door.bc.example.com.
grp1234._group._udp.bc.example.com  IN TXT
                                     txtver=1;path=/light/grp1
]]></artwork></figure>

</section>
<section anchor="rd-op" title="RD Operation">

<t>The specification of the group can be used by devices other than the luminaries
and the sensor to learn the multicast address of the group in a given room.
For example a smart phone may be used to adjust the lamps in the room.</t>

<t>After entry into the room, on request of the user, the smart phone queries
the presence of RDs and may display all the domain names found on the RDs.
The user can, for example, scroll all domains (room names in this case) and
select the room that he entered. After selection the phone shows all groups
in the selected room with their members. Selecting a group, the user can
dim, switch on/off the group of lights, or possibly even create temporary
new groups.</t>

<t>In all examples the SLAAC IPv6 address can be exchanged with the FQDN, when
a connection to DNS exists.
Using the FQDN, a node learns the interface’s IPv6 address, or the group’s
multicast address from DNS.
In the same way the presence sensor can learn the multicast address to which
it should send its presence messages.</t>

</section>
</section>
<section anchor="lwm2m-ex" title="OMA LWM2M">

<t>This example shows now the OMA LWM2M specification makes use of
the Resource Directory (RD).</t>

<section anchor="lwm2m-intro" title="OMA LWM2M">

</section>
</section>
</section>
<section anchor="acknowledgments" title="Acknowledgments">

<t>Srdjan Krco, Szymon Sasin, Kerry Lynn, Esko Dijk, Peter van der Stok, Anders
Brandt, Matthieu Vial, Michael Koster, Mohit Sethi, Sampo Ukkola and Linyi
Tian have provided helpful comments, discussions and ideas to improve and
shape this document. Zach would also like to thank his colleagues from the
EU FP7 SENSEI project, where many of the resource directory concepts were
originally developed.</t>

</section>
<section anchor="changelog" title="Changelog">

<t>Changes from -02 to -03:</t>

<t><list style="symbols">
  <t>Added an example for lighting and DNS integration</t>
  <t>Added an example for RD use in OMA LWM2M</t>
  <t>Expanded DNS-SD section</t>
  <t>Added draft authors</t>
</list></t>

<t>Changes from -01 to -02:</t>

<t><list style="symbols">
  <t>Added a catalogue use case.</t>
  <t>Changed the registration update to a POST with optional link format payload. Removed the endpoint type update from the update.</t>
  <t>Additional examples section added for more complex use cases.</t>
  <t>New DNS-SD mapping section.</t>
  <t>Added text on endpoint identification and authentication.</t>
  <t>Error code 4.04 added to Registration Update and Delete requests.</t>
  <t>Made 63 bytes a SHOULD rather than a MUST for endpoint name and resource type parameters.</t>
</list></t>

<t>Changes from -00 to -01:</t>

<t><list style="symbols">
  <t>Removed the ETag validation feature.</t>
  <t>Place holder for the DNS-SD mapping section.</t>
  <t>Explicitly disabled GET or POST on returned Location.</t>
  <t>New registry for RD parameters.</t>
  <t>Added support for the JSON Link Format.</t>
  <t>Added reference to the Groupcomm WG draft.</t>
</list></t>

<t>Changes from -05 to WG Document -00:</t>

<t><list style="symbols">
  <t>Updated the version and date.</t>
</list></t>

<t>Changes from -04 to -05:</t>

<t><list style="symbols">
  <t>Restricted Update to parameter updates.</t>
  <t>Added pagination support for the Lookup interface.</t>
  <t>Minor editing, bug fixes and reference updates.</t>
  <t>Added group support.</t>
  <t>Changed rt to et for the registration and update interface.</t>
</list></t>

<t>Changes from -03 to -04:</t>

<t><list style="symbols">
  <t>Added the ins= parameter back for the DNS-SD mapping.</t>
  <t>Integrated the Simple Directory Discovery from Carsten.</t>
  <t>Editorial improvements.</t>
  <t>Fixed the use of ETags.</t>
</list></t>

<t>Changes from -02 to -03:</t>

<t><list style="symbols">
  <t>Changed the endpoint name back to a single registration parameter ep= and removed the h= and ins= parameters.</t>
  <t>Updated REST interface descriptions to use RFC6570 URI Template format.</t>
  <t>Introduced an improved RD Lookup design as its own function set.</t>
  <t>Improved the security considerations section.</t>
  <t>Made the POST registration interface idempotent by requiring the ep= parameter to be present.</t>
</list></t>

<t>Changes from -01 to -02:</t>

<t><list style="symbols">
  <t>Added a terminology section.</t>
  <t>Changed the inclusion of an ETag in registration or update to a MAY.</t>
  <t>Added the concept of an RD Domain and a registration parameter for it.</t>
  <t>Recommended the Location returned from a registration to be stable, allowing for endpoint and Domain information to be changed during updates.</t>
  <t>Changed the lookup interface to accept endpoint and Domain as query string parameters to control the scope of a lookup.</t>
</list></t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC6690'>

<front>
<title>Constrained RESTful Environments (CoRE) Link Format</title>
<author initials='Z.' surname='Shelby' fullname='Z. Shelby'>
<organization /></author>
<date year='2012' month='August' />
<abstract>
<t>This specification defines Web Linking using a link format for use by constrained web servers to describe hosted resources, their attributes, and other relationships between links.  Based on the HTTP Link Header field defined in RFC 5988, the Constrained RESTful Environments (CoRE) Link Format is carried as a payload and is assigned an Internet media type. "RESTful" refers to the Representational State Transfer (REST) architecture.  A well-known URI is defined as a default entry point for requesting the links hosted by a server. [STANDARDS-TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='6690' />
<format type='TXT' octets='47720' target='http://www.rfc-editor.org/rfc/rfc6690.txt' />
</reference>



<reference anchor='RFC2119'>

<front>
<title abbrev='RFC Key Words'>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='Scott Bradner'>
<organization>Harvard University</organization>
<address>
<postal>
<street>1350 Mass. Ave.</street>
<street>Cambridge</street>
<street>MA 02138</street></postal>
<phone>- +1 617 495 3864</phone>
<email>sob@harvard.edu</email></address></author>
<date year='1997' month='March' />
<area>General</area>
<keyword>keyword</keyword>
<abstract>
<t>
   In many standards track documents several words are used to signify
   the requirements in the specification.  These words are often
   capitalized.  This document defines these words as they should be
   interpreted in IETF documents.  Authors who follow these guidelines
   should incorporate this phrase near the beginning of their document:

<list>
<t>
      The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
      NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
      "OPTIONAL" in this document are to be interpreted as described in
      RFC 2119.
</t></list></t>
<t>
   Note that the force of these words is modified by the requirement
   level of the document in which they are used.
</t></abstract></front>

<seriesInfo name='BCP' value='14' />
<seriesInfo name='RFC' value='2119' />
<format type='TXT' octets='4723' target='http://www.rfc-editor.org/rfc/rfc2119.txt' />
<format type='HTML' octets='17970' target='http://xml.resource.org/public/rfc/html/rfc2119.html' />
<format type='XML' octets='5777' target='http://xml.resource.org/public/rfc/xml/rfc2119.xml' />
</reference>



<reference anchor='RFC3986'>

<front>
<title abbrev='URI Generic Syntax'>Uniform Resource Identifier (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='Tim Berners-Lee'>
<organization abbrev='W3C/MIT'>World Wide Web Consortium</organization>
<address>
<postal>
<street>Massachusetts Institute of Technology</street>
<street>77 Massachusetts Avenue</street>
<city>Cambridge</city>
<region>MA</region>
<code>02139</code>
<country>USA</country></postal>
<phone>+1-617-253-5702</phone>
<facsimile>+1-617-258-5999</facsimile>
<email>timbl@w3.org</email>
<uri>http://www.w3.org/People/Berners-Lee/</uri></address></author>
<author initials='R.' surname='Fielding' fullname='Roy T. Fielding'>
<organization abbrev='Day Software'>Day Software</organization>
<address>
<postal>
<street>5251 California Ave., Suite 110</street>
<city>Irvine</city>
<region>CA</region>
<code>92617</code>
<country>USA</country></postal>
<phone>+1-949-679-2960</phone>
<facsimile>+1-949-679-2972</facsimile>
<email>fielding@gbiv.com</email>
<uri>http://roy.gbiv.com/</uri></address></author>
<author initials='L.' surname='Masinter' fullname='Larry Masinter'>
<organization abbrev='Adobe Systems'>Adobe Systems Incorporated</organization>
<address>
<postal>
<street>345 Park Ave</street>
<city>San Jose</city>
<region>CA</region>
<code>95110</code>
<country>USA</country></postal>
<phone>+1-408-536-3024</phone>
<email>LMM@acm.org</email>
<uri>http://larry.masinter.net/</uri></address></author>
<date year='2005' month='January' />
<area>Applications</area>
<keyword>uniform resource identifier</keyword>
<keyword>URI</keyword>
<keyword>URL</keyword>
<keyword>URN</keyword>
<keyword>WWW</keyword>
<keyword>resource</keyword>
<abstract>
<t>
A Uniform Resource Identifier (URI) is a compact sequence of characters
that identifies an abstract or physical resource.  This specification
defines the generic URI syntax and a process for resolving URI references
that might be in relative form, along with guidelines and security
considerations for the use of URIs on the Internet.
The URI syntax defines a grammar that is a superset of all valid URIs,
allowing an implementation to parse the common components of a URI
reference without knowing the scheme-specific requirements of every
possible identifier.  This specification does not define a generative
grammar for URIs; that task is performed by the individual
specifications of each URI scheme.
</t></abstract></front>

<seriesInfo name='STD' value='66' />
<seriesInfo name='RFC' value='3986' />
<format type='TXT' octets='141811' target='http://www.rfc-editor.org/rfc/rfc3986.txt' />
<format type='HTML' octets='214067' target='http://xml.resource.org/public/rfc/html/rfc3986.html' />
<format type='XML' octets='163534' target='http://xml.resource.org/public/rfc/xml/rfc3986.xml' />
</reference>



<reference anchor='RFC5226'>

<front>
<title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
<author initials='T.' surname='Narten' fullname='T. Narten'>
<organization /></author>
<author initials='H.' surname='Alvestrand' fullname='H. Alvestrand'>
<organization /></author>
<date year='2008' month='May' />
<abstract>
<t>Many protocols make use of identifiers consisting of constants and other well-known values. Even after a protocol has been defined and deployment has begun, new values may need to be assigned (e.g., for a new option type in DHCP, or a new encryption or authentication transform for IPsec). To ensure that such quantities have consistent values and interpretations across all implementations, their assignment must be administered by a central authority. For IETF protocols, that role is provided by the Internet Assigned Numbers Authority (IANA).&lt;/t>&lt;t> In order for IANA to manage a given namespace prudently, it needs guidelines describing the conditions under which new values can be assigned or when modifications to existing values can be made. If IANA is expected to play a role in the management of a namespace, IANA must be given clear and concise instructions describing that role. This document discusses issues that should be considered in formulating a policy for assigning values to a namespace and provides guidelines for authors on the specific text that must be included in documents that place demands on IANA.&lt;/t>&lt;t> This document obsoletes RFC 2434. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract></front>

<seriesInfo name='BCP' value='26' />
<seriesInfo name='RFC' value='5226' />
<format type='TXT' octets='66160' target='http://www.rfc-editor.org/rfc/rfc5226.txt' />
</reference>



<reference anchor='RFC5988'>

<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'>
<organization /></author>
<date year='2010' month='October' />
<abstract>
<t>This document specifies relation types for Web links, and defines a registry for them.  It also defines the use of such links in HTTP headers with the Link header field. [STANDARDS-TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='5988' />
<format type='TXT' octets='46834' target='http://www.rfc-editor.org/rfc/rfc5988.txt' />
</reference>



<reference anchor='RFC6335'>

<front>
<title>Internet Assigned Numbers Authority (IANA) Procedures for the Management of the Service Name and Transport Protocol Port Number Registry</title>
<author initials='M.' surname='Cotton' fullname='M. Cotton'>
<organization /></author>
<author initials='L.' surname='Eggert' fullname='L. Eggert'>
<organization /></author>
<author initials='J.' surname='Touch' fullname='J. Touch'>
<organization /></author>
<author initials='M.' surname='Westerlund' fullname='M. Westerlund'>
<organization /></author>
<author initials='S.' surname='Cheshire' fullname='S. Cheshire'>
<organization /></author>
<date year='2011' month='August' />
<abstract>
<t>This document defines the procedures that the Internet Assigned Numbers Authority (IANA) uses when handling assignment and other requests related to the Service Name and Transport Protocol Port Number registry. It also discusses the rationale and principles behind these procedures and how they facilitate the long-term sustainability of the registry.&lt;/t>&lt;t> This document updates IANA's procedures by obsoleting the previous UDP and TCP port assignment procedures defined in Sections 8 and 9.1 of the IANA Allocation Guidelines, and it updates the IANA service name and port assignment procedures for UDP-Lite, the Datagram Congestion Control Protocol (DCCP), and the Stream Control Transmission Protocol (SCTP). It also updates the DNS SRV specification to clarify what a service name is and how it is registered. This memo documents an Internet Best Current Practice.</t></abstract></front>

<seriesInfo name='BCP' value='165' />
<seriesInfo name='RFC' value='6335' />
<format type='TXT' octets='79088' target='http://www.rfc-editor.org/rfc/rfc6335.txt' />
</reference>



<reference anchor='RFC6570'>

<front>
<title>URI Template</title>
<author initials='J.' surname='Gregorio' fullname='J. Gregorio'>
<organization /></author>
<author initials='R.' surname='Fielding' fullname='R. Fielding'>
<organization /></author>
<author initials='M.' surname='Hadley' fullname='M. Hadley'>
<organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'>
<organization /></author>
<author initials='D.' surname='Orchard' fullname='D. Orchard'>
<organization /></author>
<date year='2012' month='March' />
<abstract>
<t>A URI Template is a compact sequence of characters for describing a range of Uniform Resource Identifiers through variable expansion.  This specification defines the URI Template syntax and the process for expanding a URI Template into a URI reference, along with guidelines for the use of URI Templates on the Internet. [STANDARDS-TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='6570' />
<format type='TXT' octets='79813' target='http://www.rfc-editor.org/rfc/rfc6570.txt' />
</reference>



<reference anchor='RFC6763'>

<front>
<title>DNS-Based Service Discovery</title>
<author initials='S.' surname='Cheshire' fullname='S. Cheshire'>
<organization /></author>
<author initials='M.' surname='Krochmal' fullname='M. Krochmal'>
<organization /></author>
<date year='2013' month='February' />
<abstract>
<t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries.  This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract></front>

<seriesInfo name='RFC' value='6763' />
<format type='TXT' octets='125192' target='http://www.rfc-editor.org/rfc/rfc6763.txt' />
</reference>



<reference anchor='I-D.ietf-core-links-json'>
<front>
<title>Representing CoRE Link Collections in JSON</title>

<author initials='C' surname='Bormann' fullname='Carsten Bormann'>
    <organization />
</author>

<date month='July' day='4' year='2014' />

<abstract><t>Web Linking (RFC5988) provides a way to represent links between Web resources as well as the relations expressed by them and attributes of such a link.  In constrained networks, a collection of Web links can be exchanged in the CoRE link format (RFC6690).  Outside of constrained environments, it may be useful to represent these collections of Web links in JSON format (RFC7159).  This specification defines a common format for representing Web links in JSON format.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-core-links-json-02' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-core-links-json-02.txt' />
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC7252'>

<front>
<title>The Constrained Application Protocol (CoAP)</title>
<author initials='Z.' surname='Shelby' fullname='Z. Shelby'>
<organization /></author>
<author initials='K.' surname='Hartke' fullname='K. Hartke'>
<organization /></author>
<author initials='C.' surname='Bormann' fullname='C. Bormann'>
<organization /></author>
<date year='2014' month='June' />
<abstract>
<t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.&lt;/t>&lt;t> CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t></abstract></front>

<seriesInfo name='RFC' value='7252' />
<format type='TXT' octets='258789' target='http://www.rfc-editor.org/rfc/rfc7252.txt' />
</reference>



<reference anchor='RFC7390'>

<front>
<title>Group Communication for the Constrained Application Protocol (CoAP)</title>
<author initials='A.' surname='Rahman' fullname='A. Rahman'>
<organization /></author>
<author initials='E.' surname='Dijk' fullname='E. Dijk'>
<organization /></author>
<date year='2014' month='October' />
<abstract>
<t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for constrained devices and constrained networks.  It is anticipated that constrained devices will often naturally operate in groups (e.g., in a building automation scenario, all lights in a given room may need to be switched on/off as a group).  This specification defines how CoAP should be used in a group communication context.  An approach for using CoAP on top of IP multicast is detailed based on existing CoAP functionality as well as new features introduced in this specification.  Also, various use cases and corresponding protocol flows are provided to illustrate important concepts.  Finally, guidance is provided for deployment in various network topologies.</t></abstract></front>

<seriesInfo name='RFC' value='7390' />
<format type='TXT' octets='106675' target='http://www.rfc-editor.org/rfc/rfc7390.txt' />
</reference>



<reference anchor='RFC6775'>

<front>
<title>Neighbor Discovery Optimization for IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs)</title>
<author initials='Z.' surname='Shelby' fullname='Z. Shelby'>
<organization /></author>
<author initials='S.' surname='Chakrabarti' fullname='S. Chakrabarti'>
<organization /></author>
<author initials='E.' surname='Nordmark' fullname='E. Nordmark'>
<organization /></author>
<author initials='C.' surname='Bormann' fullname='C. Bormann'>
<organization /></author>
<date year='2012' month='November' />
<abstract>
<t>The IETF work in IPv6 over Low-power Wireless Personal Area Network (6LoWPAN) defines 6LoWPANs such as IEEE 802.15.4.  This and other similar link technologies have limited or no usage of multicast signaling due to energy conservation.  In addition, the wireless network may not strictly follow the traditional concept of IP subnets and IP links.  IPv6 Neighbor Discovery was not designed for non- transitive wireless links, as its reliance on the traditional IPv6 link concept and its heavy use of multicast make it inefficient and sometimes impractical in a low-power and lossy network.  This document describes simple optimizations to IPv6 Neighbor Discovery, its addressing mechanisms, and duplicate address detection for Low- power Wireless Personal Area Networks and similar networks.  The document thus updates RFC 4944 to specify the use of the optimizations defined here. [STANDARDS-TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='6775' />
<format type='TXT' octets='130616' target='http://www.rfc-editor.org/rfc/rfc6775.txt' />
</reference>



<reference anchor='RFC7230'>

<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding'>
<organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke'>
<organization /></author>
<date year='2014' month='June' />
<abstract>
<t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the "http" and "https" Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract></front>

<seriesInfo name='RFC' value='7230' />
<format type='TXT' octets='205947' target='http://www.rfc-editor.org/rfc/rfc7230.txt' />
</reference>



<reference anchor='RFC3629'>

<front>
<title>UTF-8, a transformation format of ISO 10646</title>
<author initials='F.' surname='Yergeau' fullname='F. Yergeau'>
<organization /></author>
<date year='2003' month='November' />
<abstract>
<t>ISO/IEC 10646-1 defines a large character set called the Universal Character Set (UCS) which encompasses most of the world's writing systems.  The originally proposed encodings of the UCS, however, were not compatible with many current applications and protocols, and this has led to the development of UTF-8, the object of this memo.  UTF-8 has the characteristic of preserving the full US-ASCII range, providing compatibility with file systems, parsers and other software that rely on US-ASCII values but are transparent to other values.  This memo obsoletes and replaces RFC 2279.</t></abstract></front>

<seriesInfo name='STD' value='63' />
<seriesInfo name='RFC' value='3629' />
<format type='TXT' octets='33856' target='http://www.rfc-editor.org/rfc/rfc3629.txt' />
</reference>



<reference anchor='RFC5198'>

<front>
<title>Unicode Format for Network Interchange</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin'>
<organization /></author>
<author initials='M.' surname='Padlipsky' fullname='M. Padlipsky'>
<organization /></author>
<date year='2008' month='March' />
<abstract>
<t>The Internet today is in need of a standardized form for the transmission of internationalized "text" information, paralleling the specifications for the use of ASCII that date from the early days of the ARPANET.  This document specifies that format, using UTF-8 with normalization and specific line-ending sequences. [STANDARDS-TRACK]</t></abstract></front>

<seriesInfo name='RFC' value='5198' />
<format type='TXT' octets='45708' target='http://www.rfc-editor.org/rfc/rfc5198.txt' />
</reference>



<reference anchor='RFC1123'>

<front>
<title>Requirements for Internet Hosts - Application and Support</title>
<author initials='R.' surname='Braden' fullname='Robert Braden'>
<organization>University of Southern California (USC), Information Sciences Institute</organization>
<address>
<postal>
<street>4676 Admiralty Way</street>
<city>Marina del Rey</city>
<region>CA</region>
<code>90292-6695</code>
<country>US</country></postal>
<phone>+1 213 822 1511</phone>
<email>Braden@ISI.EDU</email></address></author>
<date year='1989' month='October' /></front>

<seriesInfo name='STD' value='3' />
<seriesInfo name='RFC' value='1123' />
<format type='TXT' octets='245503' target='http://www.rfc-editor.org/rfc/rfc1123.txt' />
</reference>



<reference anchor='RFC1034'>

<front>
<title abbrev='Domain Concepts and Facilities'>Domain names - concepts and facilities</title>
<author initials='P.' surname='Mockapetris' fullname='P. Mockapetris'>
<organization>Information Sciences Institute (ISI)</organization></author>
<date year='1987' day='1' month='November' /></front>

<seriesInfo name='STD' value='13' />
<seriesInfo name='RFC' value='1034' />
<format type='TXT' octets='129180' target='http://www.rfc-editor.org/rfc/rfc1034.txt' />
</reference>



<reference anchor='I-D.ietf-core-interfaces'>
<front>
<title>CoRE Interfaces</title>

<author initials='Z' surname='Shelby' fullname='Zach Shelby'>
    <organization />
</author>

<author initials='M' surname='Vial' fullname='Matthieu Vial'>
    <organization />
</author>

<date month='November' day='10' year='2014' />

<abstract><t>This document defines well-known REST interface descriptions for Batch, Sensor, Parameter and Actuator types for use in contrained web servers using the CoRE Link Format.  A short reference is provided for each type that can be efficiently included in the interface description attribute of the CoRE Link Format.  These descriptions are intended to be for general use in resource designs or for inclusion in more specific interface profiles.  In addition, this document defines the concepts of Function Set and Binding.  The former is the basis element to create RESTful profiles and the latter helps the configuration of links between resources located on one or more endpoints.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-core-interfaces-02' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-core-interfaces-02.txt' />
</reference>




    </references>



  </back>
</rfc>

