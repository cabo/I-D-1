<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" []>
<?xml-stylesheet type='text/xsl' href='http://xml.resource.org/authoring/rfc2629.xslt' ?>
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="no"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc strict="no"?>
<?rfc compact="no"?>
<?rfc subcompact="no"?>

<rfc category="std" ipr="trust200902" docName="draft-koster-core-coapmq-00.txt">

  <front>
  <title abbrev="Message Queueing in CoAP">Message Queueing in the Constrained Application Protocol (CoAP)</title>   

    <author fullname="Michael Koster" initials="M.K." surname="Koster">
      <organization>ARM Limited</organization>
      <address>
	    <email>Michael.Koster@arm.com</email>
      </address>
    </author>

    
    
    <author fullname="Ari Keranen" initials="A.K." surname="Keranen">
      <organization>Ericsson</organization>
      <address>
        <email>ari.keranen@ericsson.com</email>
      </address>
    </author>
	
    <date year="2014"/>
    <keyword>Internet-Draft</keyword>
    <keyword>CORE</keyword>
    <keyword>CoAP</keyword>
    <keyword>Message Queueing</keyword>
    <abstract>

  <t>The Constrained Application Protocol, CoAP, and related extensions are intended to support machine-to-machine communication in systems where one or more nodes are resource constrained, in particular for low power wireless sensor networks. This document defines publish-subscribe message queuing functionality for CoAP that extends the capabilities for supporting nodes with long breaks in connectivity and/or up-time.</t>
  
</abstract>

  </front>
  <middle>

<!-- ====================================================================== -->

<section anchor="introduction" title="Introduction">
   <t>IETF CoRE supports machine to machine communication across networks of constrained devices. One important class of constrained devices includes devices that are intended to run for years from a small battery, or by scavenging energy from their environment. These devices spend most of their time in a sleeping state with no network connectivity.</t>

   <t>Devices may also have limited reachability due to certain middle-boxes, such as Network Address Translators (NATs) or firewalls. Such devices must communicate using a client role, whereby the endpoint is responsible for initiating communication.</t>

   <t>This document specifies the means for nodes with limited reachability to communicate using simple extensions to CoAP and the CoRE Resource Directory [I-D.ietf-core-resource-directory-01]. The extensions enable publish-subscribe communication using a Message Queue (MQ) broker node that enables store-and-forward messaging between two or more nodes.</t>

</section>

<!-- ====================================================================== -->

<section title="Terminology">
   <t>The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL NOT',
   'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY', and 'OPTIONAL' in this
   specification are to be interpreted as described in <xref target="RFC2119"/>.</t>
   
   <t>This specification requires readers to be familiar with all the terms and concepts that are discussed in <xref target="RFC5988"/> and <xref target="RFC6690"/>. Readers should also be familiar with the terms and concepts discussed in <xref target="I-D.ietf-core-coap"/> and <xref target="I-D.ietf-core-resource-directory"/>. The URI template format, see <xref target="RFC6570"/>, is used to describe the REST interfaces defined in this specification.</t>

   <t>This specification makes use of the following additional terminology:
<list style="hanging">

<t hangText="Publish-Subscribe:">CoapMQ supports publish-subscribe pattern interactions, where an endpoint uses the core.mq function server as a broker, sending updates to be buffered and sent to zero or more subscribers. Likewise, an endpoint may register with a core.mq server to receive buffered updates published to the core.mq server by other endpoints. There is a simple binding of operations to pub-sub protocol operations, for example MQTT publish and subscribe operations.</t>

<t hangText="TOpic">A Topic, in Publish-Subscribe systems, is a unique identifying string for a particular item or object being published and subscribed to.</t>

</list>
</t>

 <t>The following entities are used in this specification:
<list style="hanging">

<t hangText="CoAP Message Queue (CoAP-MQ) Service">A service provided by a node or system where CoAP messages sent by one endpoint to another are queued (stored) by intermediate node(s) and forwarded only when suitable, e.g., when the message recipient endpoint is not sleeping.</t>

<t hangText="CoAP-MQ Broker">A server node capable of storing messages to and from other nodes and able to match subscriptions and publications in order to route messages to right destinations.</t>

<t hangText="CoAP-MQ Endpoint">An endpoint that implements the MQ function set defined in Section 5. A CoAP-MQ endpoint has two potential roles, CoAP-MQ client and CoAP-MQ server</t>

</list>
</t>

</section>
	  
<!-- ====================================================================== -->

<section anchor="architecture" title="Architecture"> 

<section title="RD Server with MQ function set">

<t><xref target="arch-fig"/> shows an example architecture of a CoAP-MQ capable service. A RD service accepts registrations and registration updates from endpoints and hosts a resource discovery service for web application clients. State information is updated from the endpoints to the core.mq function server. Web clients subscribe to the state of the endpoint from the CoAP-MQ broker, and publish updates to the endpoint state through the CoAP-MQ broker. The CoAP-MQ broker performs a store-and-forward function between the web client and the CoAP-MQ capable endpoints.</t>

        <t>
        <figure title="CoAP MQ Architecture" anchor="arch-fig">
          <artwork>
            <![CDATA[
 Endpoints                  Service                   Applications
                           +------+
                           |      |
            +- register -> |  RD  | <- discover -+
 +------+   |              |      |              |   +--------+
 |      | --+              +------+              +-- |  Web   |
 |  EP  |                                            | Client |
 |      | <-+              +------+              +-> |  app   |
 +------+   |              |      |              |   +--------+
  |  EP  |  +-- pub/sub -> |  MQ  | <- pub/sub --+    |  app   |
  +------+                 |      |                   +--------+
                           +------+
]]>
</artwork>
</figure>
</t>
</section>

<section title="Client Endpoint"> 
<t>Client endpoints initiate all interactions with the RD and MQ broker. If the endpoint is an actuator it will need to either use CoAP Observe [I-D.ietf-core-observe] or periodically poll the MQ broker to check for updates. A client endpoint would use CoAP PUT operations to update its state on the MQ broker. An endpoint updates the RD periodically to indicate that it is still alive even if it has no pending data updates. Endpoints can operate in client mode even if not directly reachable from the CoAP-MQ broker or RD.</t>

</section> 

<section title="Server endpoint">
<t>Server endpoint interactions require the CoAP-MQ broker to perform the client role, initiating interaction with the server endpoint. The CoAP-MQ client MAY then use PUT operations to update state at the server endpoint, and MAY use GET or GET+Observe to subscribe to resources at the endpoint. Server mode endpoints are required to be reachable from core.mq function servers. In a network containing both client and server endpoints, client endpoints MAY subscribe to server endpoints directly, in broker-less configurations.</t>

</section>

<section title="Publish-Subscribe Topics">
<t>Topic are strings used to identify particular resources and objects in publish-subscribe systems. Topics are conventionally formed as a hierarchy, e.g. "/sensors/weather/barometer/pressure". Implementations MAY map topics to resources, reusing existing resource addressing schemes. </t>

</section>

</section>

<!-- ====================================================================== -->

<section title="Registration and discovery - RD server"> 
<t>An endpoint wishing to use the CoapMQ protocol registers with an RD server that advertises the core.mq function set. The endpoint registers resources with the core.pubsub attribute to indicate intention to use the CoapMQ protocol.</t>

<section title="Register PubSub Endpoint">
<t><xref target="reg-fig"/> shows the flow of the registration operation. Discovery proceeds as per Resource Directory. When an endpoint wishes to use the CoapMQ protocol, it discovers the "core.mq" function set at the RD service and registers its CoAP-MQ resources with the RD server by creating a RD endpoint and updating it with resources having the rt="core.pubsub" attribute. An implementation MAY mix CoAP-MQ resources and CoAP REST resources on the same endpoint.</t>

        <t>
        <figure title="Discovery and Registration Message Exchange" anchor="reg-fig">
          <artwork>
            <![CDATA[
EP                                               MQ        RD
 |                  MQ DISCOVERY                 |         |
 | -------- GET /.well-known/core?rt=core.mq --- | ------> |
 |                                               |         |
 | <-------- 2.05 Content “</mq>; rt=core.mq”--- | ------- |
 |                                               |         |
 |                                               |         |
 |                EP REGISTRATION                |         |
 | ------------- POST /rd “</mq/0/…” ----------- | ------> |
 |                                               |         |
 | <-------- 2.01 Created Location: /rd/1234 --- | ------- |
 |                                               |         |
 |                                               |         |
]]>
</artwork>
</figure>
</t>
</section>

<section title="Unregister Endpoint">
<t>CoapMQ endpoints indicate the end of their registration tenure by either explicitly unregistering, as in <xref target="unreg-fig"/>, or allowing the lifetime of the previous registration to expire, as in <xref target="unreg-fig"/>.</t>

<t>
<figure title="Unregister Endpoint Message Exchange" anchor="unreg-fig">
<artwork>
<![CDATA[
EP                                               MQ        RD
|                                               |         |
|                    UNREGISTER                 |         |
| ---------------- DELETE /rd/1234 ------------ | ------> |
|                                               |         |
| <-------- 2.01 Deleted Location: /rd/1234 --- | ------- |
|                                               |         |
|                                               |         |
]]>
</artwork>
</figure>
</t>

</section>

</section>

<!-- ====================================================================== -->


<section title="CoRE MQ Function Set">

<section title="Client Endpoint Functions">

<section title="Endpoint publish to core.mq">
<t>Client mode endpoint uses PUT to update the sensor or property resource at the core.mq server.</t>

<t>
<figure title="PUT from EP Message Exchange" anchor="put-ep-fig">
<artwork>
<![CDATA[
EP                                               MQ        RD
|                                               |         |
|                                               |         |
|                    PUBLISH                    |         |
| ----------------- PUT /0/... ---------------> |         |
|                                               |         |
|                                               |         |
| <--------------- 2.04 Changed---------------- |         |
|                                               |         |
|                                               |         |
]]>
</artwork>
</figure>
</t>
</section>


<section title="Endpoint subscribe to core.mq using GET+Observe, core.mq server publishes notifications to the endpoint">
<t>Client mode endpoint subscribes to resource at core.rd server using GET+Observe. Updates to the REST API at the core.rd server are published to the actuator using Observe response tokens. Client may update actuator or resource based on received values associated with responses.</t>

<t>
<figure title="Publish to the Endpoint" anchor="publish-fig">
<artwork>
<![CDATA[
EP                                               MQ        RD
|                                               |         |
|                                               |         |
|                 SUBSCRIBE                     |         |
| ------- GET /0/... Observe: Token:XX -------> |         |
|                                               |         |
|                  PUBLISH                      |         |
| <---------- 2.05 Content Observe:10---------- |         |
|                                               |         |
|                  PUBLISH                      |         |
| <---------- 2.05 Content Observe:12---------- |         |
|                                               |         |
|                  PUBLISH                      |         |
| <---------- 2.05 Content Observe:15---------- |         |
|                                               |         |
|                                               |         |
]]>
</artwork>
</figure>
</t>
</section>

<section title="Endpoint GET from core.mq server">
<t>Client mode endpoint may issue GET without Observe as needed to obtain last published state from the core.mq server.</t>

<t>
<figure title="GET from core.mq server Message Exchange" anchor="get-mq-fig">
<artwork>
<![CDATA[
EP                                               MQ        RD
|                                               |         |
|                                               |         |
|                                               |         |
| ---------------- GET /0/... ----------------> |         |
|                                               |         |
|                                               |         |
| <--------------- 2.05 Content --------------- |         |
|                                               |         |
|                                               |         |
]]>
</artwork>
</figure>
</t>

</section>

</section>

<section title="Server Endpoint Functions">

<section title="core.mq subscribe to endpoint using GET+Observe, endpoint publishes notifications to the core.mq server">
<t>The server mode endpoint enables the core.mq server to act as a client and subscribe to a resource on the endpoint using GET + Observe. <xref target="sub-observe-fig"/> shows the flow of core.mq server subscribing to the endpoint. </t>

        <t>
        <figure title="GET+Observe Message Exchange" anchor="sub-observe-fig">
          <artwork>
            <![CDATA[
EP                                               MQ        RD
 |                                               |         |
 |                                               |         |
 |                SUBSCRIBE                      |         |
 | <------- GET /0/... Observe: Token:XX ------- |         |
 |                                               |         |
 |                 PUBLISH                       |         |
 | ---------- 2.05 Content Observe:10----------> |         |
 |                                               |         |
 |                 PUBLISH                       |         |
 | ---------- 2.05 Content Observe:12----------> |         |
 |                                               |         |
 |                 PUBLISH                       |         |
 | ---------- 2.05 Content Observe:15----------> |         |
 |                                               |         |
 |                                               |         |
]]>
</artwork>
</figure>
</t>

</section>


<section title="core.mq publish to endpoint">
<t>core.rd server may update server mode endpoint using PUT when REST API updates occur. Endpoint server may update actuator or resource.</t>

        <t>
        <figure title="PUT by MQ Message Exchange" anchor="put-mq-fig">
          <artwork>
            <![CDATA[
EP                                               MQ        RD
 |                                               |         |
 |                                               |         |
 |                    PUBLISH                    |         |
 | <---------------- PUT /0/... ---------------- |         |
 |                                               |         |
 |                                               |         |
 | ---------------- 2.04 Changed---------------> |         |
 |                                               |         |
 |                                               |         |
]]>
</artwork>
</figure>
</t>

</section>

<section title="core.mq GET from endpoint">
<t>Core.mq server may issue GET without Observe as needed to obtain state update from the server mode endpoint.</t>

        <t>
        <figure title="GET from endpoint Message Exchange" anchor="get-ep-fig">
          <artwork>
            <![CDATA[
EP                                               MQ        RD
 |                                               |         |
 |                                               |         |
 |                                               |         |
 | <--------------- GET /0/... ----------------- |         |
 |                                               |         |
 |                                               |         |
 | ---------------- 2.05 Content --------------> |         |
 |                                               |         |
 |                                               |         |
]]>
</artwork>
</figure>
</t>

</section>
</section> 
</section>

<!-- ====================================================================== -->

<section title="Sleep-Wakeup Cycle">

<section title="Registration with lifetime > max sleep interval">
<t>TBD</t>
</section>

<section title="Signal using RD update to indicate wakeup at least once before lifetime">
<t>TBD</t>
</section>

<section title="ACK not received timeout unregister - CoRE Observe unregister method? timeout linked to max sleep, lifetime? 7.31 with Token?">
<t>TBD</t>
</section>

<section title="RD update wakeup triggers pending endpoint ops (GET, SUB, PUT), queued ops from core.mq server - can this handshake with update ACK?">
<t>TBD</t>
</section>

<section title="Simple publish without RD update, either PUT or Observe Notification. Should this also reset the lifetime timer?">
<t>TBD</t>
</section>

<section title="Example">
        <t>
        <figure title="Example Sleep-Wakeup Message Exchange" anchor="sleep-wakeup-fig">
          <artwork>
            <![CDATA[
EP                                               MQ        RD
 |                                               |         |
 |                                               |         |
 |                   MQ DISCOVERY                |         |
 | -------- GET /.well-known/core?rt=core.mq --- | ------> |
 |                                               |         |
 | <-------- 2.05 Content “</mq>; rt=core.mq”--- | ------- |
 |                                               |         |
 |                   REGISTRATION                |         |
 | ------------- POST /rd “</mq/0/…” ----------- | ------> |
 |                                               |         |
 | <-------- 2.01 Created Location: /rd/1234 --- | ------- |
 |                                               |         |
 |                                               |         |
 |                                               |         |
 |                 WAKEUP SIGNAL                 |         |
 |              UPDATE REGISTRATION              |         |
 | ---------------- PUT /rd/1234 --------------- | ------> |
 |                                               |         |
 |                    PUBLISH                    |         |
 | <---------------- PUT /0/... ---------------- |         |
 |                                               |         |
 | ---------------- 2.04 Changed---------------> |         |
 |                                               |         |
 |                   SUBSCRIBE                   |         |
 | <------- GET /0/... Observe: Token:XX ------- |         |
 |                                               |         |
 |                   PUBLISH                     |         |
 | ---- 2.05 Content Observe:10 Token:XX-------> |         |
 |                                               |         |
 |                  OK TO SLEEP                  |         |
 | <--------------- 2.04 Changed---------------- |         |
 |                                               |         |
 |                                               |         |
 |                   PUBLISH                     |         |
 | ---- 2.05 Content Observe:10 Token:XX-------> |         |
 |                                               |         |
 |                                               |         |
 |                    PUBLISH                    |         |
 | ----------------- PUT /0/... ---------------> |         |
 |                                               |         |
 | <--------------- 2.04 Changed---------------- |         |
 |                                               |         |
 |                                               |         |
]]>
</artwork>
</figure>
</t>
</section>
</section> 

<!-- ====================================================================== -->

<section title="MQTT Protocol Binding">

<t>TBD</t>
<!-- 7.1 Topic mapping to path
7.2 MQTT client Subscribe to CoAP MQ resource
7.X CoAP MQ resource publish to (broker) subscribed MQTT client
7.X MQTT client Publish to CoAP MQ resource
--> 

</section>


 
<!-- ====================================================================== -->

<section anchor="SecurityConsiderations" title="Security Considerations">
  <t>TBD</t>
</section> 


<!-- ====================================================================== -->
<!-- 
<section anchor="PrivacyConsiderations" title="Privacy Considerations">
  <t>TBD</t>
</section>
--> 
<!-- ====================================================================== -->

<section anchor="iana" title="IANA Considerations">
<t>TBD</t>
</section> 

<!-- ====================================================================== -->

    
<section anchor="acks" title="Acknowledgements">
  <t>Add your name here.</t>
</section>


  </middle>

<!-- ====================================================================== -->
  <back>

    <references title="Normative References"> 
      <?rfc include="reference.RFC.2119"?>
      <?rfc include="reference.RFC.6690"?>
      <?rfc include="reference.RFC.6570"?>
      <?rfc include="reference.I-D.ietf-core-resource-directory"?>
      <?rfc include="reference.I-D.ietf-core-coap"?>
    </references> 

    <references title="Informative References"> 
	      <?rfc include="reference.RFC.5988"?>
    </references>
  
  </back>

</rfc>
