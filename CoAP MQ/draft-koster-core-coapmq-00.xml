<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" []>
<?xml-stylesheet type='text/xsl' href='http://xml.resource.org/authoring/rfc2629.xslt' ?>
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc strict="no"?>
<?rfc compact="no"?>
<?rfc subcompact="no"?>

<rfc category="std" ipr="trust200902" docName="draft-koster-core-coapmq-00">

  <front>
  <title abbrev="Message Queueing in CoAP">Message Queueing in the Constrained Application Protocol (CoAP)</title>   

    <author fullname="Michael Koster" initials="M.K." surname="Koster">
      <organization>ARM Limited</organization>
      <address>
	    <email>Michael.Koster@arm.com</email>
      </address>
    </author>

    
    <author fullname="Ari Keranen" initials="A.K." surname="Keranen">
      <organization>Ericsson</organization>
      <address>
        <email>ari.keranen@ericsson.com</email>
      </address>
    </author>
	

<author fullname="Jaime Jimenez" initials="J.J." surname="Jimenez">
      <organization>Ericsson</organization>
      <address>
        <email>jaime.jimenez@ericsson.com</email>
      </address>
    </author>
	

    <date year="2014"/>
    <keyword>Internet-Draft</keyword>
    <keyword>CORE</keyword>
    <keyword>CoAP</keyword>
    <keyword>Message Queueing</keyword>
    <abstract>

  <t>The Constrained Application Protocol, CoAP, and related extensions are intended to support machine-to-machine communication in systems where one or more nodes are resource constrained, in particular for low power wireless sensor networks. This document defines publish-subscribe message queuing functionality for CoAP that extends the capabilities for supporting nodes with long breaks in connectivity and/or up-time.</t>
  
</abstract>

  </front>
  <middle>

<!-- ====================================================================== -->

<section anchor="introduction" title="Introduction">
<t>The Constrained Application Protocol (CoAP) <xref target="RFC7252"/> supports machine to machine communication across networks of constrained devices. One important class of constrained devices includes devices that are intended to run for years from a small battery, or by scavenging energy from their environment. These devices spend most of their time in a sleeping state with no network connectivity.</t>

<t>Devices may also have limited reachability due to certain middle-boxes, such as Network Address Translators (NATs) or firewalls. Such devices must communicate using a client role, whereby the endpoint is responsible for initiating communication.</t>

<t>This document specifies the means for nodes with limited reachability to communicate using simple extensions to CoAP and the CoRE Resource Directory <xref target="I-D.ietf-core-resource-directory"/>. The extensions enable publish-subscribe communication using a Message Queue (MQ) broker node that enables store-and-forward messaging between two or more nodes.</t>

<t>The mechanisms specified in this document are meant to address key design requirements from earlier CoRE drafts covering sleepy node support and mirror server. </t>

</section>

<!-- ====================================================================== -->

<section title="Terminology">
   <t>The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL NOT',
   'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY', and 'OPTIONAL' in this
   specification are to be interpreted as described in <xref target="RFC2119"/>.</t>
   
   <t>This specification requires readers to be familiar with all the terms and concepts that are discussed in <xref target="RFC5988"/> and <xref target="RFC6690"/>. Readers should also be familiar with the terms and concepts discussed in <xref target="RFC7252"/> and <xref target="I-D.ietf-core-resource-directory"/>. The URI template format, see <xref target="RFC6570"/>, is used to describe the REST interfaces defined in this specification.</t>

<t>This specification makes use of the following additional terminology:
<list style="hanging">

<t hangText="CoAP Message Queue (CoAP-MQ) Service:">A service provided by a node or system where CoAP messages sent by one endpoint to another are queued (stored) by intermediate node(s) and forwarded only when suitable, e.g., when the message recipient endpoint is not sleeping.</t>

<t hangText="CoAP-MQ Broker:">A server node capable of storing messages to and from other nodes and able to match subscriptions and publications in order to route messages to right destinations.</t>

<t hangText="CoAP-MQ function set:">A group of well-known REST resources that together provide the CoAP-MQ service.</t>

<t hangText="CoAP-MQ Endpoint">An endpoint that implements the CoAP-MQ function set. A CoAP-MQ endpoint has two potential roles, CoAP-MQ client and CoAP-MQ server.</t>

<!-- This needs a bit more meat -->
<t hangText="Publish-Subscribe (pub-sub):">A messaging paradigm where messages are published (e.g., to a broker) and potential receivers can subscribe to receive the messages.</t>

<t hangText="Topic:">In Publish-Subscribe systems a topic is a unique identifying string for a particular item or object being published and/or subscribed to.</t>

</list>
</t>

</section>
	  
<!-- ====================================================================== -->

<section anchor="architecture" title="Architecture"> 

<section title="RD Server with associated CoAP-MQ Broker">

<t><xref target="arch-fig"/> shows an example architecture of a CoAP-MQ capable service. A Resource Directory service accepts registrations and registration updates from one or more endpoints and hosts a resource discovery service for one or more web application clients. State information is updated from the endpoints to the CoAP-MQ broker. Web clients subscribe to the state of the endpoint from the CoAP-MQ broker, and publish updates to the endpoint state through the CoAP-MQ broker. The CoAP-MQ broker performs a store-and-forward function between web clients and the CoAP-MQ capable endpoints. The CoAP-MQ broker is also responsible for acting as a proxy, returning the last published value to web clients or other endpoints on behalf endpoints that are sleeping.</t>

        <t>
        <figure title="CoAP MQ Architecture" anchor="arch-fig">
          <artwork>
            <![CDATA[
 Endpoints                  Service                   Applications
                           +------+
                           |      |
            +- register -> |  RD  | <- discover -+
 +------+   |              |      |              |   +--------+
 |      | --+              +------+              +-- |  Web   |
 |  EP  |                                            | Client |
 |      | <-+              +------+              +-> |  app   |
 +------+   |              | CoAP |              |   +--------+
  |  EP  |  +-- pub/sub -> |  MQ  | <- pub/sub --+    |  app   |
  +------+                 |Broker|                   +--------+
                           +------+
]]>
</artwork>
</figure>
</t>
</section>

<section title="Client Endpoint"> 
<t>Client endpoints initiate all interactions with the RD and MQ broker. If the endpoint is an actuator it will need to either use CoAP Observe [I-D.ietf-core-observe] or periodically poll the MQ broker to check for updates. A CoAP-MQ client endpoint MUST use CoAP PUT operations to update its state on the MQ broker. An endpoint SHOULD update the RD periodically to indicate that it is still alive even if it has no pending data updates. Endpoints can operate in the client role even if not directly reachable from the CoAP-MQ broker or RD server.</t>

</section> 

<section title="Server Endpoint">
<t>Server endpoint interactions require the CoAP-MQ broker to perform the client role, initiating interaction with the server endpoint. The CoAP-MQ broker MAY then use PUT operations to update state at the server endpoint, and MAY use GET or GET+Observe to subscribe to resources at the endpoint. Server mode endpoints are required to be reachable from the CoAP-MQ broker. In a network containing both client and server endpoints, client endpoints MAY subscribe to server endpoints directly, in broker-less configurations, using RD or core-link-format metadata in .well-known/core to discover the CoAP-MQ capabilities and using GET+Observe to subscribe to the desired topics.</t>

</section>

<section title="Publish-Subscribe Topics">
<t>Topic are strings used to identify particular resources and objects in publish-subscribe systems. Topics are conventionally formed as a hierarchy, e.g. "/sensors/weather/barometer/pressure". Implementations are free to map topics to resources, reusing existing resource addressing schemes. </t>

</section>

</section>

<!-- ====================================================================== -->

<section title="CoAP-MQ Registration and discovery">
<t>An endpoint wishing to use a CoAP-MQ broker registers with an RD server that advertises a service having the "core.mq" attribute. This indicates that there is a CoAP-MQ broker at the location returned by the discovery query as shown in <xref target="reg-fig"/>. The endpoint registers topics using the "rt=core.pubsub.client" or "core.pubsub.server" (or both) attributes to indicate intention to use CoAP-MQ and which roles are supported.</t>

<t>A server that implements a CoAP_MQ broker MAY advertize this capability by registering the rt="core.mq" with an associated Resource Directory. If a server advertizes as a CoAP-MQ Broker, it MUST support the transactions described in section 5 of this document. As server that implements the CoAP-MQ Broker MAY also implement sleeping endpoint and message queueing support referred to in Section 6 of this document.</t>

<section title="Register PubSub Endpoint">
<t><xref target="reg-fig"/> shows the flow of the registration operation. Discovery proceeds as per CoRE Resource Directory[I-D.ietf-core-resource-directory-01]. When an endpoint wishes to use CoAP-MQ, it discovers the rt="core.mq" attribute at the RD service associated with the CoAP-MQ broker and registers its CoAP-MQ resources with the RD server by registering topics having the rt="core.pubsub" attribute. Topics are created using an initial POST operation to the registered topic or any valid sub-topic. For example, if the registered topic is "/sensors/weather", the sub-topic "/sensors/weather/barometer" is created using a POST to "/mq/sensors/weather/barometer". An implementation MAY mix CoAP-MQ resources and CoAP REST resources on the same endpoint. Endpoint registration proceeds as per normal RD registration.</t>

        <t>
        <figure title="Discovery and Registration" anchor="reg-fig">
          <artwork>
            <![CDATA[
EP                                               MQ        RD
 |                  MQ DISCOVERY                 |         |
 | -------- GET /.well-known/core?rt=core.mq --- | ------> |
 |                                               |         |
 | <-------- 2.05 Content “</mq>; rt=core.mq”--- | ------- |
 |                                               |         |
 |                                               |         |
 |                TOPIC REGISTRATION             |         |
 | ---POST /rd “</mq/0/xx>;rt=core.pubsub.xx”--- | ------> |
 |                                               |         |
 | <-------- 2.01 Created Location: /rd/1234 --- | ------- |
 |                                               |         |
 |                                               |         |
 |                 FIRST PUBLISH                 |         |
 | ---------------- POST /mq/0/... ------------> |         |
 |                                               |         |
 | <--------------- 2.01 Created---------------- |         |
 |                                               |         |
]]>
</artwork>
</figure>
</t>
</section>

<section title="Unregister Endpoint">
<t>CoAP-MQ endpoints indicate the end of their registration tenure by either explicitly unregistering, as in <xref target="unreg-fig"/>, or allowing the lifetime of the previous registration to expire.</t>

<t>
<figure title="Unregister Endpoint" anchor="unreg-fig">
<artwork>
<![CDATA[
EP                                               MQ        RD
|                                               |         |
|                    UNREGISTER                 |         |
| ---------------- DELETE /rd/1234 ------------ | ------> |
|                                               |         |
| <-------- 2.02 Deleted Location: /rd/1234 --- | ------- |
|                                               |         |
|                                               |         |
]]>
</artwork>
</figure>
</t>

</section>

</section>

<!-- ====================================================================== -->

<section title="CoAP-MQ Functions and Interactions">
<t>This section describes the transaction flows and interactions between CoAP-MQ endpoints and CoAP-MQ brokers. Client endpoint functions are used by endpoints implementing the client role, for example to enable sleep/wakeup and partial connectivity. Server role endpoint functions are used by endpoints implementing the server role, for example always on, reachable, endpoints. An endpoint implementation MAY support both client role and server role at an endpoint. A CoAP-MQ broker MUST implement support for both client role and server role endpoints.</t>

<section title="Client Role Endpoint Functions">
<t>This section describes the transaction flows and interactions between CoAP-MQ endpoints and CoAP-MQ brokers where the endpoint supports the client role. A client registering the "core.pubsub.client" attribute MUST support the client role endpoint functions and interactions described in this section.</t>

<section title="Client Endpoint PUBLISH to CoAP-MQ broker">
<t>Client endpoint PUBLISH updates to CoAP-MQ broker.</t>

<t>
<figure title="Client Role PUBLISH from EP to Broker" anchor="put-ep-fig">
<artwork>
<![CDATA[
EP                                              MQ        RD
|                                               |         |
|                                               |         |
|                    PUBLISH                    |         |
| --------------- PUT /mq/0/... --------------> |         |
|                                               |         |
|                                               |         |
| <--------------- 2.04 Changed---------------- |         |
|                                               |         |
|                                               |         |
]]>
</artwork>
</figure>
</t>
</section>


<section title="Client Endpoint SUBSCRIBE, Broker PUBLISH">
<t>Client mode endpoint subscribes to the topic at the CoAP-MQ broker using GET+Observe. Published updates to the CoAP-MQ broker are published to the Endpoint using Observe response tokens. Client endpoint MAY update actuator or resource based on received values associated with responses. A CoAP-MQ broker MUST publish updates to subscribed endpoints upon receiving published updates on the associated topics.</t>

<t>
<figure title="Client Role Endpoint SUBSCRIBE, Broker PUBLISH to Endpoint" anchor="publish-fig">
<artwork>
<![CDATA[
EP                                              MQ        RD
|                                               |         |
|                                               |         |
|                 SUBSCRIBE                     |         |
| ----- GET /mq/0/... Observe: Token:XX ------> |         |
|                                               |         |
|                  PUBLISH                      |         |
| <---------- 2.05 Content Observe:10---------- |         |
|                                               |         |
|                  PUBLISH                      |         |
| <---------- 2.05 Content Observe:12---------- |         |
|                                               |         |
|                  PUBLISH                      |         |
| <---------- 2.05 Content Observe:15---------- |         |
|                                               |         |
|                                               |         |
]]>
</artwork>
</figure>
</t>
</section>

<section title="Client Endpoint GET from CoAP-MQ Broker">
<t>Client mode endpoint MAY issue GET to topic without Observe as needed to obtain last published state from the CoAP-MQ broker.</t>

<t>
<figure title="Client EP GET from CoAP-MQ Broker" anchor="get-mq-fig">
<artwork>
<![CDATA[
EP                                              MQ        RD
|                                               |         |
|                                               |         |
|                                               |         |
| --------------- GET /mq/0/... --------------> |         |
|                                               |         |
|                                               |         |
| <--------------- 2.05 Content --------------- |         |
|                                               |         |
|                                               |         |
]]>
</artwork>
</figure>
</t>

</section>

</section>

<section title="Server Role Endpoint Functions">
<t>This section describes the transaction flows and interactions between CoAP-MQ endpoints and CoAP-MQ brokers where the endpoint supports the server role. An endpoint registering the "core.pubsub.server" attribute MUST support these functions and interactions.</t>

<section title="CoAP-MQ broker SUBSCRIBES to Server Role EP">
<t>The server mode endpoint requires the CoAP-MQ broker to act as a client and subscribe to a resource on the endpoint using GET + Observe. A CoAP-MQ broker MAY subscribe to topics registered by a server role endpoint at any time. A CoAP-MQ broker MUST subscribe to a topic registered by a server role endpoint upon receiving a subscription on the associated topic. A CoAP-MQ broker MUST forward state updates received from a publishing endpoint to all endpoints subscribed on the associated topic. <xref target="sub-observe-fig"/> shows the flow of a CoAP-MQ Broker subscribing to a server role endpoint. </t>

        <t>
        <figure title="Broker SUBSCRIBE to Server Role EP" anchor="sub-observe-fig">
          <artwork>
            <![CDATA[
EP                                               MQ        RD
 |                                               |         |
 |                                               |         |
 |                SUBSCRIBE                      |         |
 | <------ GET /0/... Observe: Token:XX -------- |         |
 |                                               |         |
 |                 PUBLISH                       |         |
 | ---------- 2.05 Content Observe:10----------> |         |
 |                                               |         |
 |                 PUBLISH                       |         |
 | ---------- 2.05 Content Observe:12----------> |         |
 |                                               |         |
 |                 PUBLISH                       |         |
 | ---------- 2.05 Content Observe:15----------> |         |
 |                                               |         |
 |                                               |         |
]]>
</artwork>
</figure>
</t>

</section>


<section title="CoAP-MQ Broker Publishes to Server Role Endpoint">
<t>CoAP-MQ broker MUST update server mode endpoint using PUT when upon receiving updates published on the associated topics. Endpoint server MAY update actuator or resource upon receiving published state updates from the broker.</t>

        <t>
        <figure title="Broker PUBLISH to Server Role EP" anchor="put-mq-fig">
          <artwork>
            <![CDATA[
EP                                               MQ        RD
 |                                               |         |
 |                                               |         |
 |                    PUBLISH                    |         |
 | <--------------- PUT /0/... ----------------- |         |
 |                                               |         |
 |                                               |         |
 | ---------------- 2.04 Changed---------------> |         |
 |                                               |         |
 |                                               |         |
]]>
</artwork>
</figure>
</t>

</section>

<section title="CoAP-MQ Broker GET from Server Role Endpoint">
<t>CoAP-MQ broker MAY issue GET without Observe as needed to obtain state update from the server role endpoint.</t>

        <t>
        <figure title="Broker GET from Server Role Endpoint" anchor="get-ep-fig">
          <artwork>
            <![CDATA[
EP                                               MQ        RD
 |                                               |         |
 |                                               |         |
 |                                               |         |
 | <---------------- GET /0/... ---------------- |         |
 |                                               |         |
 |                                               |         |
 | ---------------- 2.05 Content --------------> |         |
 |                                               |         |
 |                                               |         |
]]>
</artwork>
</figure>
</t>

</section>
</section> 
</section>

<!-- ====================================================================== -->

<section title="Enabling Multiple Publishers">

<section title="Creating a Topic">

<t>After registration of the EP in the RD and discovering the CoAP-MQ function, a designated EP acting as publisher for a particular topic is responsible for creating such topic. To do so, it will have to register the new topic in the RD and create it on the MQ function by doing a first publication as shown in <xref target="reg-fig"/>.</t>
<t>After the topic has been created in the CoAP-MQ broker, the broker will be responsible of hosting this resource and to queue messages published on it as explained in Section 5</t>
</section>

<section title="Publishing a Topic from Multiple Publishers">

<t>After the topic has been registered in the RD and is created in the CoAP-MQ broker, any device with the right access permissions can publish on that topic by using the topic field. For example in the following diagram, both EP1 and EP2 update the same topic that EP3 has previously subscribed to.</t>
<t>After the topic has been created in the CoAP-MQ Broker, the broker will be responsible of hosting this resource and to queue messages published on it as explained in Section 5</t>

<t>
<figure title="Multiple CoAP-MQ EPs PUBLISH to Broker" anchor="multi-pub-fig">
<artwork>
<![CDATA[
EP1     EP2                                     MQ
|       |            PUBLISH                    |
| -------------- PUT /mq/0/TOPIC1 ------------> |
|       |                                       |
| <--------------- 2.04 Changed---------------- |
|       |                                       |
|       |            PUBLISH                    |
|       | ------ PUT /mq/0/TOPIC1 ------------> |
|       |                                       |
|       | <------- 2.04 Changed---------------- |
|       |                                       |
]]>
</artwork>
</figure>
</t>

</section>


<section title="Subscribing to a topic with multiple publishers">

<t>Subscription to this topic is the same as in Section 5, since it acts as any other resource. Following the previous example, if EP3 is subscribed to the shared topic, it should receive two updates from both EP1 and EP2.</t>

<t>
<figure title="CoAP-MQ Endpoint SUBSCRIBE to Broker" anchor="multi-pub-sub-fig">
<artwork>
<![CDATA[
EP3                                              MQ
|                 SUBSCRIBE                     |
| ------- GET /mq/0/TOPIC1 Observe -----------> |
|                                               |
|                  PUBLISH                      |
| <-----------  2.05 Content EP1 -------------- |
|                                               |
|                  PUBLISH                      |
| <-----------  2.05 Content EP2 -------------- |
|                                               |
]]>
</artwork>
</figure>
</t>

</section>

</section>

<!-- ====================================================================== -->

<section title="Sleep-Wakeup Operation and Message Queueing">
<t>A CoAP-MQ broker MAY implement support for sleeping endpoints and queueing of messages as provided for in <xref target="OMALightweightM2M"/></t>
</section>

 
<!-- ====================================================================== -->

<section anchor="SecurityConsiderations" title="Security Considerations">
<t>CoAP-MQ re-uses CoAP <xref target="RFC7252"/>, CoRE Resource Directory <xref target="I-D.ietf-core-resource-directory"/>, and Web Linking <xref target="RFC5988"/> and therefore the security considerations of those documents also apply to this specification. Additionally, a CoAP-MQ broker and the endpoints SHOULD authenticate each other and enforce access control policies. A malicious EP could subscribe to data it is not authorized to or mount a denial of service attack against the broker by publishing a large number of resources. The authentication can be performed using the already standardized DTLS offered mechanisms, such as certificates. DTLS also allows communication security to be established to ensure integrity and confidentiality protection of the data exchanged between these relevant parties. Provisioning the necessary credentials, trust anchors and authorization policies is non-trivial and subject of ongoing work.</t>

<t>The use of a CoAP-MQ broker introduces challenges for the use of end-to-end security between the end device and the cloud-based server infrastructure since brokers terminate the exchange. While running separate DTLS sessions from the EP to the broker and from broker to the web application protects confidentially on those paths, the client/server EP does not know whether the commands coming from the broker are actually coming from the client web application. Similarly, a client web application requesting data does not know whether the data originated on the server EP. For scenarios where end-to-end security is desirable the use of application layer security is unavoidable. Application layer security would then provide a guarantee to the client EP that any request originated at the client web application. Similarly, integrity protected sensor data from a server EP will also provide guarantee to the client web application that the data originated on the EP itself. The protected data can also be verified by the intermediate broker ensuring that it stores/caches correct request/response and no malicious messages/requests are accepted. The broker would still be able to perform aggregation of data/requests collected.</t>

<t>Depending on the level of trust users and system designers place in the CoAP-MQ broker, the use of end-to-end encryption may also be envisioned. The CoAP-MQ broken would then only be able to verify the request/response message/commands and store-and-forward without being able to inspect the content. The solution for providing application layer security will depend on the utilized data encoding. For example, with a JSON-based data encoding the work from the JOSE working group could be re-used. Distribution of the credentials for accomplishing end-to-end security might introduce challenges if previously unknown parties need to exchange data.</t>
</section> 


<!-- ====================================================================== -->
<!-- 
<section anchor="PrivacyConsiderations" title="Privacy Considerations">
  <t>TBD</t>
</section>
--> 
<!-- ====================================================================== -->

<section anchor="iana" title="IANA Considerations">
<t>This document registers two attribute values in the Resource Type (rt=) registry established with RFC 6690 <xref target="RFC6690"/>.</t>

<section title="Resource Type value 'core.pubsub.client'">
<t>
<list style="symbols">
<t>Attribute Value: core.pubsub.client</t>
<t>Description: Section X of [[This document]]</t>
<t>Reference: [[This document]]</t>
<t>Notes: None</t>
</list>
</t>
</section>

<section title="Resource Type value 'core.pubsub.server'">
<t>
<list style="symbols">
<t>Attribute Value: core.pubsub.server</t>
<t>Description: Section Y of [[This document]]</t>
<t>Reference: [[This document]]</t>
<t>Notes: None</t>
</list>
</t>
</section>

</section>

<!-- ====================================================================== -->

    
<section anchor="acks" title="Acknowledgements">
  <t>Hannes Tschofenig, Zach Shelby</t>
</section>


</middle>

<!-- ====================================================================== -->
  <back>

<references title="Normative References">
<?rfc include="reference.RFC.2119"?>
<?rfc include="reference.RFC.6690"?>
<?rfc include="reference.RFC.6570"?>
<?rfc include="reference.I-D.ietf-core-resource-directory"?>
<?rfc include="reference.I-D.ietf-core-observe"?>
<!--      <?rfc include="reference.I-D.draft-ietf-core-interfaces"?> -->
<?rfc include="reference.RFC.7252"?>

<reference anchor="OMALightweightM2M">
<front>
<title>OMA LightweightM2M v1.0</title>
<author>
<organization>Open Mobile Alliance</organization>
</author>
<date month="12" year="2013"/>
</front>
<seriesInfo name="" value="http://technical.openmobilealliance.org/Technical/technical-information/release-program/current-releases/oma-lightweightm2m-v1-0"/>
</reference>

    </references>

    <references title="Informative References">
	      <?rfc include="reference.RFC.5988"?>
    </references>
  
  </back>

</rfc>
