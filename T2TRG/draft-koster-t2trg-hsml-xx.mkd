---
stand_alone: true
ipr: trust200902
docname: draft-koster-t2trg-hsml-00
cat: exp
pi:
  strict: 'yes'
  toc: 'yes'
  tocdepth: '3'
  symrefs: 'yes'
  sortrefs: 'yes'
  compact: 'yes'
  comments: yes
  subcompact: 'no'
  iprnotified: 'no'
title: Media Types for Hypertext Sensor Markup
area: Internet
wg: Thing-to-Thing Research Group
kw: IoT, T2TRG, Web of Things, Hypermedia, Semantic Interoperability
date: 2016-7-10
author:
- ins: M. Koster
  name: Michael Koster
  org: SmartThings
  street: 1281 Lawrence Station Road
  city: Sunnyvale
  code: '94089'
  country: USA
  phone: "+1-707-502-5136"
  email: michael.koster@smartthings.com
normative:
informative:
  RFC6690:
  I-D.ietf-core-links-json:
  RFC3986:
  RFC5988:
  RFC5989:
  RFC7252:
  RFC7516:
  RFC1866:
  I-D.ietf-core-interfaces:
  I-D.ietf-core-resource-directory:
  I-D.ietf-core-senml:
  I-D.ietf-cose-msg:
  I-D.groves-core-dynlink:
  I-D.selander-ace-object-security:

  REST:
    target: http://www.ics.uci.edu/~fielding/pubs/dissertation/fielding_dissertation.pdf
    title: Architectural Styles and the Design of Network-based Software Architectures
    author:
        ins: R. Fielding
        name: Roy Thomas Fielding
        org: University of California, Irvine
    date: 2000
    seriesinfo:
      "Ph.D.": "Dissertation, University of California, Irvine"
    format:
      PDF: http://www.ics.uci.edu/~fielding/pubs/dissertation/fielding_dissertation.pdf


  W3C-WoT: 
    target: https://www.w3.org/WoT/IG/
    title: W3C Web of Things Interest Group
    author: 
        ins: WoT IG
    date: 2016
    
    
  T2TRG:
    target: https://datatracker.ietf.org/rg/t2trg/charter/
    title: IRTF Thing to Thing Research Group
    author: 
        ins: IRTF
    date: 2016

    
--- abstract
The scale and scope of the worldwide web has been in part driven by the availability of HTML as a common serialization, data model, and interaction model for structured resources on the web. By contrast, the general use of appropriate hypermedia techniques for machine interfaces has been limited by the lack of a common markup format for serialization and exchange of structured machine resources and sensor/actuator data which includes or embeds standardized hypermedia controls. Machine optimized content formats exist for web links {{RFC5988}} {{RFC6690}} and for data items {{I-D.ietf-core-senml}}. Structured data which contains both links and items is known as the collection type. This draft describes media types for representation of machine resources structured as collections. A common data model is described with a representation format that uses a common set of reserved keywords to expose hypermedia controls, which inform clients how to perform state transfer operations on resources. The underlying assumptions regarding transfer layer processing are specified in this document. The HSML media type described in this document is compatible both SenML and with CoRE Link-format by reusing the keyword identifiers and element structures from these documents in the base representation of the collection.

--- middle

# Scope of this document {#scope}

This is a broadly scoped document which specifies representation formats, data models, interaction models, transfer mapping, URI processing, and design pattern extensions including actions and bindings.

The features listed above and new features may be specified and extended as needed in other documents which refer to this document.

# Overview and Use Case Requirements

Use case requirements include the following.

A standardized way to expose self-describing resource representations using embedded hyperlinks and link annotations.

A standardized way of organizing and interacting with resource instances using hyperlmedia controls such as links and forms.

A standardized encapsulation of resources for modeling things, capabilities, groups, indices, and other common structures.


# Data Model and Interaction Model {#model}

The HSML data model consists of collections containing links and items. An instance of a collection is identified by a URI.

Items are data elements, either within the context the collection, or outide the context of the collection. An instance of an item is identified by a URI.

Links are standard web links as in {{RFC5988}} or {{RFC6690}}.

Items are identified by links in a collection. An Item may only be in the context of one collection, but may be identified by any number of links in any number of collections.

Links in a collection may point to items within the context of the collection or they may point to items external to the collection, on the same server or on other servers.

Items in the collection that use the SenML data model may be embedded in the collection and transferred either along with the links or separately from links.

## Normative Representation

JSON formatted examples are used in this document to illustrate normative and informative concepts. Representations in other formats may be derived from the JSON representations.

## Links

Links follow the specifications in {{RFC5988}} and {{RFC6690}} with extensions to implement actions and monitors as described in this document and any referencing extension documents.

## Collections

Collections contain one or more links and extended links, and may contain data items referred to by the links. A representation of a collection may contain both links and data items, plus any extended links such as action forms. 

## Link Embedding

Link embedding emnables the transfer of more than one item in a collection using a single transfer operation. 

### Batch operations on multiple items in a collection

A collection of items enables operations on more than one item at a time by exposing a structured a representation of multiple resources in the collection.

Applications may select resources by using URI parameters, and transfer representations of multiple resources using the SenML multi-item format.

### Collective operation on groups of linked resources

Resource links in the collection may specify group transfer semantics, where transfer operations are replicated the resources indicated by the links optionally selected using URI parameters. Group responses are aggregated using the SenML multi-item format.

# Abstract Transfer Model

The HSML media type assumes a transfer model capable of interacting with representations using a simple CRUD model, allowing for basic life cycle operations on resources and collections.

CREATE
:    Create an instance of a resource as specified using the payload as a constructor. Optionally return a reference to the created resource. Typically uses POST in CoAP or HTTP, may use PUBLISH in pubsub protocols.

RETRIEVE
:    Obtain a representation of the selected resource. Typically uses GET in CoAP or HTTP, could use SUBSCRIBE with message retention in pubsub.

UPDATE
:    Replace or partially replace the representation of the selected resource. Typically uses PUT or PATCH in CoAP and HTTP, could use PUBLISH in pubsub in the frequent case that CREATE and UPDATE are not needed on the same resource.
 
DELETE
:    Remove the representation of the selected resource. Typically uses DELETE in CoAP or HTTP. There is no natural mapping to pubsub if a remove operation is not provided.

OBSERVE
:    Obtain a sequence of representations of the selected resource, indicating state updates which occur on the resource. Typically uses CoAP Observe, HTTP EventSource, MQTT SUBSCRIBE. OBSERVE is the transfer equivalent of performing a RETRIEVE on the resource immediately following each state change of the resource.
{: vspace='0'}


# Collections {#collection-description}

## Base elements
Base elements describe the context under which to interpret values embedded in subsequent items within the representation of a collection.

The base identifier element (bi) may contain an absolute URI or an absolute path reference from which to base relative references found in the links. It functions as a base URI embedded in content as per {{RFC3986}} Section 5.1.1

URI reference follows the definition in {{RFC3986}} Section 5.

The format of base elements are specified in {{I-D.ietf-core-senml}}. {{fig-example-base-identifier}} is an example of a base  element.

~~~
    {
      "bi": "/dev/sen/"
    }
~~~    
{: #fig-example-base-identifier title='Example Base URI' align="left"}

Other base items from SenML are permissible, including base time (bt) and base value(bv). If additional senml base element are present, the client MUST interpret the items in the collection in the context of the applicable base elements. For example, if there is a "bv" or base value elment, all of the returned values from items in the collection MUST be added to the base value as per {{I-D.ietf-core-senml}}.

## Link element
A link element is a hyperlink based on the structure and syntax of {{RFC6690}} and {{I-D.ietf-core-links-json}}. An example link element is shown in {{fig-link-element}}.

~~~~
    {
      "href": "temp",
      "rt": "some.sensortype"
    }
~~~~
{: #fig-link-element title='Example Link Element' align="left"}


## Item element
An item element in a collection is a data element that is referenced by a link in the collection. 

Items in the collection are indicated by a references (href) that serve as a selection variables for matching to URI parameters and resource names in multi-resource representataions. Reference resolution should use the rules defined in {{RFC3986}}.

Items may be embedded in the collection, they may be subresources of the collection, or they may be items in other collections referenced by links in the collection. An example item element is shown in {{fig-item-element}}

~~~~
    {
      "n": "temp",
      "v": "77"
    }
~~~~
{: #fig-item-element title='Example Item Element' align="left"}




# Representation Formats {#representation-formats}

## Example Serialization Formats {#example-formats}
{{fig-example-hsml}} shows an example document in hsml+json format. This example contains a base element, a link element, and an item element.

RETRIEVE /dev/sen/ accept=application/hsml.collection+json
or
RETRIEVE /dev/sen/ accept=application/(hsml+)json
or
RETRIEVE /dev/sen/ accept=application/(hsml+)json?if=hsml.collection

(response)

~~~~
    [
      {
        "bi": "/dev/sen/"
      },
      {
        "href": "temp",
        "rt": "some.sensor"
      },
      {
        "n": "temp",
        "v": "77"
      }
    ]
~~~~
{: #fig-example-hsml title='application/hsml+json Example' align="left"}

The HSML media type defines content formats and corresponding CoRE Interface Types that may select partial representations of the resource for interaction.

### Collection Formats

Collection formats as shown in {{fig-example-hsml}} expose all of the elements of a resource, including items, links, and link extensions. 

### Link Formats

Link content formats, when used in an "accept" option or "content-type" option in a transfer header, or when selected by the "if=hsml.link" URI paramater, will select the link elements in the collection for interaction as in {{fig-example-hsml-link}}.

RETRIEVE /dev/sen/ accept=application/hsml.link+json
or
RETRIEVE /dev/sen/ accept=application/(hsml+)json?if=hsml.link

(response)

~~~~
    [
      {
        "href": "temp",
        "rt": "some.sensor"
      }
    ]
~~~~
{: #fig-example-hsml-link title='application/hsml.link+json Example' align="left"}

CoRE link-format content formats select RFC6690 compliant links, and may not return representations of extended links (rel=action, rel=monitor).

### Item Formats

Item content formats, when used in an "accept" option or "content-type" option in a transfer header, or when selected by the "if=hsml.item" URI paramater, will select the item elements in the collection for interaction as in {{fig-example-hsml-item}}.

RETRIEVE /dev/sen/ accept=application/hsml.item+json
or
RETRIEVE /dev/sen/ accept=application/(hsml+)json?if=hsml.item

(response)

~~~~
    [
      {
        "bi": "/dev/sen/"
      },
      {
        "n": "temp",
        "v": "77"
      }
    ]
~~~~
{: #fig-example-hsml-item title='application/hsml.item+json Example' align="left"}

SenML content formats select data records and return SenML compliant resource names. "bn" may optionally be returned when  compliant resource names "n" may be resolved through simple string concatenation as per {{I-D.ietf-core-senml}}.

# URI and Parameter Processing

The HSML media type defines URI reference processing and URI Query processing but does not in general define fragment (#) references in URIs. 

If fragment references are provided in a particular transfer implementation, they should be used to select single items in collections in accordance with current practice.

## URI Path Processing

The path part of the URI reference used to indicate HSML resources may be used as a reference to a collection or to an item in a collection. Collection references should contain the trailing slash character "/" in accordance with {{RFC3986}}. Server implementations should return links to collections with the trailing "/", and should attempt to accept references to collections without the trailing "/" if such references can be used to construct unambiguous references.

References to items in a collection should not contain the trailing "/" character. Servers should return item references that do not contain the trailing "/" character, and should should attempt to accept references to items in collections with the trailing "/" if such references can be used to construct unambiguous references.

URI references may be routed to collections in the order in which path segments appear in the reference, from left to right reading the path string, separated by "/" characters.

URI references may alternatively be routed as opaque strings to resources. In this case, the resolution of relative references to items in a collection should be possible by concatenating the relative reference to the context URI of the collection. Note that this may enforce certain naming conventions such as the trailing slash in practice. 

## URI Parameter processing

URI Parameters, typically mapped as query parameters in HTTP and CoAP, are used for selecting resources, selecting partial representations, and otherwise modifying aspects of the expected or included representation. In this way, they may be considered part of the URI, since they help identify a unique representation to be transferred.

### Resource selection

URI Parameters may be used to select resources in a collection for transfer. This is done using the common parameter matching rules specified in {{RFC6690}}.

Resource selection is performed based on matching URI Parameters with Link Parameters of all links in the collection which are exposed by the indicated media type and interface type. URI Parameters listed in {{uri-params}} are excluded from the matching process. 

The target resource selection depends on the content-format specified in the request or the interface type specified in the URI parameters. 

The collection content-formats or interface types select all links and items in the collection, including link extensions.

The link content formats or interface types select all links in the collection. 

The item content formats or interface types select all items in the collection.

# Transfer Model Mapping

## Target Resource is Collection 

### RETRIEVE 
List Selected Elements

### CREATE 
Add Elements to Collection

### UPDATE 
UPDATE Selected Elements

### DELETE 
Remove Selected Elements

## Target Resource is Links

### RETRIEVE 
List Selected Links

### CREATE 
Add Links to the collection

### UPDATE (including partial update) 
Modify Selected Links

### DELETE
Remove Selected Links

## Target Resource is Items

### Link Embedding Items

Collective operations on items in collections are invoked by using the URI of the collections, along with URI parameters, to select one or more items in the collection. 

### RETRIEVE
Retrieve Selected Items

### UPDATE
Modify Selected Items

### DELETE
Remove Selected Items and corresponding links

### CREATE
Create Items and add them to the collection with default links

## Groups {#groups}

Group transfer operations are provided by collections that contain links with the "grp" relation value. 

Transfer operations which specify the collection URI as target are sent to the resolved URI of each link in the collection that contains the "grp" relation.

URI Parameters may be used to select a particular subset of target resources within the group in the collection.

Responses from the selected group resources are aggregated and by default returned as a single response. The group response SHOULD be returned as an outer array where such representation is available, for example a JSON array which contains elements consisting of SenML responses.

Optionally, a chunked response may be specified, if allowed by the transfer implementation, in which the response from each group member is returned individually as a sequence of responses.

# Link extensions

## Actions

Actions are hypermedia controls used to construct transfer operations that change the state of resources. The use roughly follows the use of forms in HTML {{RFC1866}}, with semantics more consistent with links.

An example Action element is shown in {{fig-action-element}}

~~~~
    {
      "rel": "action",
      "type": "st.on",
      "href": "commands",
      "method": "create",
      "accept": "application/json",
      "schema": {"value": "on"}
    }
~~~~
{: #fig-action-element title='Example Action Element' align="left"}

This Action element informs the client that to perform a type "st.on" action on the context resource, perform a CREATE method on the "commands" URI relative to the context URI, using the application/json content type, with a payload as defined by the "Schema" parameter.

## Monitors

Monitors are hypermedia controls used to construct transfer operations that expose state changes of resources. A monitor invokes an outbound transfer operation on a target resource. Monitors use the IANA registered link relation "monitor", defined in {{RFC5989}}.

An example Monitor element is shown in {{fig-monitor-element}}

~~~~
    {
      "rel": "monitor",
      "href": "tank-level-events",
      "content-type": "application/senml+json",
      "target-method": "create",
      "pmin": 600,
      "pmax": 3600,
      "nbul": 20,
      "nbll": 80
    }
~~~~
{: #fig-monitor-element title='Example Monitor Element' align="left"}

This Monitor element defines a monitor resource at the "tank-level-events" URI relative to the context URI, which OBSERVEs the context URI, and updates the "tank-level-events" resource using the CREATE method to add JSON items to the collection, according to the given conditional parameters no more frequently than once every 600 seconds, at least once every 3600 seconds, when the reading is in the notification band, which has a lower limit of 80 and wraps around zero to an upper limit of 20. This has the effect of defining a low level alert notification and high level alert notification.

# Reserved Identifiers {#reserved-identifiers}

This section defines the common reserved identifiers that are expected to be processed by implementations of HSML clients and servers. There are many more relation types and link parameters defined and registered with IANA. Implementations should not restrict processing to the keywords identified in this document; they should accept all IANA registered keywords as valid identifiers.

Many of the keywords listed are defined in other RFCs and IETF documents. This document does not redefine any existing keywords. Where a definition exists, the existing definition will be used. Where multiple conflicting definitions exist, this document will indicate the required definition.

New definitions are summarized in {{iana-cons}}.

## Default CURIE

Identifiers in representations using the HSML media types are assumed to use the default CURIE "hsml". An identifier that is not matched to an existing namespace is assumed to carry the prefix "hsml".

For example, if the identifier "method" is encountered and it doesn't resolve to an IANA registered parameter (reg-parameter in {{RFC5988}}) resolution should be attempted using "hsml:method".

The default CURIE "hsml" identifies a namespace defined by the identifiers in {{reserved-identifiers}} of this document.

## URI Processing Parameters {#uri-params}

The following URI Parameters are used to filter representations according to specific processing rules and should not be used to attempt to match link parameters.

"if"
:    Interface type, used to select a partial representation of a collection

"count"
:    Indicates the number of items to be returned from the collection

"start"
:    Indicates the array index of the item in the collection to select as the first item to be returned

"page"
:    Page number, in units of count

## Link Keywords {#link-keywords}
The following keywords are reserved for use in an HSML serialization to indicate elements of a web link

"anchor"
:    overrides the default resource context of the link

"rel"
:    link relation type as defined in {{RFC5988}} and {{RFC6690}}

"href"
:    target of a link reference. This may be a relative reference in the collection e.g. "currentValue" or a local absolute reference "/sensors/temp/currentValue" or a full reference "https://example.com/sensors/temp/currentValue"
{: vspace='0'}

### Link Relation Types
The following keywords are reserved for use in a HSML serialization to indicate types of link relations, and are used for values of "rel". 

"self"
:    refers to the collection that contains the link

"item"
:    the link points to an item in the collection

"grp"
:    the item the link points to is available for collective interaction through the collection URI according to group semantics described in {{groups}}.
{: vspace='0'}

### Link Attribute Types 
The following keywords are reserved for use in a HSML serialization to indicate types of link attributes

"rt"
:    the resource type(s) of the item

"u"
:    units of measure

"ct"
:    the CoAP content-format number(s) associated with the item

"content-type"
:    the media type string(s) associated with the item

"obs"
:    presence of this attribute indicates that the associated resource is observable
{: vspace='0'}

## Item Keywords {#item-keywords}
The following keywords are reserved for use in a HSML serialization to indicate elements within the serialization. Some of these are defined in {{I-D.ietf-core-senml}}.

"bi"
:    the base URI of the collection, relative to the service location e.g. "/sensors/temp/" Thi sis a new definition for HSML

"bt"
:    the base time that corresponds to the encapsulated state of the collection

"t"
:    the time stamp that corresponds to the encapsulated state of the item in the collection, relative to the base time "bt"

"n"
:    the name or URI of the resource, relative to the base URI of the collection e.g. "currentValue". 

"u"
:    units of measure

"v"
:    number value

"vb"
:    boolean value

"vs"
:    string value
{: vspace='0'}

## Link Parameters used in Actions

"anchor"
:    May override the default context of an action and store it in a different location from the subject resource

"rel"
:    Indicates that this control is an action; MUST contain the value "action"

"href"
:    URI for mapping the action specified in the action

"type"
:    Additional indicator of the action being exposed, can be used with "rel"

"method"
:    Transfer method to use on a particular action

"accept"
:    The Content-Types or CoAP content-formats that are accepted on create and update methods

"content-type"
:    The Content-Types that are exposed by retrieve and observe methods

"ct"
:    the CoAP content-format number(s) exposed 

"schema"
:    Indicates the schema to use for constructing or interpreting transfer payloads, may be a literal value or a URI pointing to an instance of a schema
{: vspace='0'}

## Link Parameters used in Monitors

"anchor"
:    May override the context URI of a binding with any observable resource

"rel"
:    Indicates that this control is a monitor; MUST contain the value "monitor"

"href"
:    The URI of the resource used to monitor context URI, where transfer operations will be sent.

"accept"
:    The media type string or CoAP content-format to request from the observed resource

"content-type"
:    The media type string to use in the transfer operation

"ct"
:    the CoAP content-format number to use in the transfer operation

"accept-method"
:    Transfer method to use in request from the observed resource, default is OBSERVE

"target-method"
:    Transfer method to use for notifications, default is UPDATE

"accept-schema"
:    Schema to use in interpreting the observed resource payload, required if target-schema is used.

"target-schema"
:    Schema to use in constructing the notification transfer payload, default is to transfer the accepted payload unmodified to the target resource.
{: vspace='0'}

## Conditional Observe Parameters used in Monitors

"pmin"
:    Minimum time between notification from a binding

"pmax"
:    Maximum time between notifications from a binding

"gt"
:    value to match or exceed to determine notification condition

"lt"
:    value to match or be less than to determine notification condition

"st"
:    value change +/- from last report to determine notification condition

"eq"
:    value to match, or change from, to determine notification condition

"nbll"
:    Defines a lower limit, at or above which notification is enabled

"nbul"
:    Defines an upper limit, at or below which notification is enabled

"init"
:    Starts the notification state machine with an initial value
{: vspace='0'}

## Link Attribute Values 
The following keywords are reserved for use in a HSML serialization to indicate values of link attributes

"create"
:    transfer layer CREATE operation, value of "method", "accept-method", or "target-method"

"retrieve"
:    transfer layer RETRIEVE operation, value of "method", "accept-method", or "target-method"

"update"
:    transfer layer UPDATE operation, value of "method", "accept-method", or "target-method"

"delete"
:    transfer layer DELETE operation, value of "method", "accept-method", or "target-method"

"observe"
:    transfer layer OBSERVE operation, value of "method", "accept-method", or "target-method"
{: vspace='0'}


# IANA Considerations {#iana-cons}

## New Media Types for IANA Media Type registry

Type

* application

Subtypes 

* hsml
* hsml.collection
* hsml.link
* hsml.item

Media type strings

* application/hsml 
* application/hsml.collection
* application/hsml.link
* application/hsml.item

* application/hsml+json
* application/hsml.collection+json
* application/hsml.link+json
* application/hsml.item+json

## New Content Formats for the IANA CoRE Parameters Registry

(subject to Structured Syntax encoding rules TBD)

* 22000 - application/hsml+json 
* 22001 - application/hsml.link+json
* 22002 - application/hsml.item+json

## New Link Parameters

* method
* schema
* content-type
* ct

* accept-method
* target-method
* accept-schema
* target-schema

The following should be registered in the CoRE dynamic linking draft {{I-D.groves-core-dynlink}}.

* pmin
* pmax
* nbll
* nbul
* init
* lt
* gt
* st
* eq


## New Link Relation Types (rel=)

* grp

## New Interface types (if=) for the IANA CoRE Parameters Registry

* hsml.collection
* hsml.item
* hsml.link

## Transfer Layer method definitions may use the default CURIE and do not need to be registered with IANA

* hsml:create
* hsml:retrieve
* hsml:update
* hsml:delete
* hsml:observe

# Security Considerations

## Object Signing
Collection representations are resource state encapsulations and may be transmitted and stored as signed objects in order to protect the integrity of data and metadata, including time and embedded access control information.

## Signed Embedded Time Stamps
The collection may include time stamps (bt and t) that are signed with the object data and metadata.

## Signed Embedded Access Control 
The collection representation may include embedded access control information, also signed with the metadata, that can instruct the server to enforce a particular access policy for transfer requests.

## Secure State Updates
Representations submitted to a server to update the state of a resource (UPDATE, CREATE, DELETE) may also contain embedded signed assertions which may be used by the server to decide whether to apply or reject the update.

## Object Signing and Encryption
Object signing and encryption SHOULD use the mechanisms specified in IETF documents for secure JSON Objects {{RFC7516}} and CBOR Objects {{I-D.ietf-cose-msg}} {{I-D.selander-ace-object-security}}.

# Design Patterns

## RESTful Actuation using collections

## RESTful Events and Alerts using collections

--- back

