<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" []>
<?xml-stylesheet type='text/xsl' href='http://xml.resource.org/authoring/rfc2629.xslt' ?>
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc strict="no"?>
<?rfc compact="no"?>
<?rfc subcompact="no"?>

<rfc category="std" ipr="trust200902" docName="draft-koster-core-coap-pubsub-02">

  <front>
  <title abbrev="Publish-Subscribe Broker for CoAP">Publish-Subscribe Broker for the Constrained Application Protocol (CoAP)</title>

    <author fullname="Michael Koster" initials="M.K." surname="Koster">
      <organization>ARM Limited</organization>
      <address>
	    <email>Michael.Koster@arm.com</email>
      </address>
    </author>

    
    <author fullname="Ari Keranen" initials="A.K." surname="Keranen">
      <organization>Ericsson</organization>
      <address>
        <email>ari.keranen@ericsson.com</email>
      </address>
    </author>
	

<author fullname="Jaime Jimenez" initials="J.J." surname="Jimenez">
      <organization>Ericsson</organization>
      <address>
        <email>jaime.jimenez@ericsson.com</email>
      </address>
    </author>
	

    <date year="2015"/>
    <keyword>Internet-Draft</keyword>
    <keyword>CoRE</keyword>
    <keyword>CoAP</keyword>
    <keyword>Publish Subscribe</keyword>
    <abstract>

  <t>The Constrained Application Protocol (CoAP), and related extensions are intended to support machine-to-machine communication in systems where one or more nodes are resource constrained, in particular for low power wireless sensor networks. This document defines a publish-subscribe broker for CoAP that extends the capabilities of CoAP for supporting nodes with long breaks in connectivity and/or up-time.</t>
  
</abstract>

  </front>
  <middle>

<!-- ====================================================================== -->

<section anchor="introduction" title="Introduction">
<t>The Constrained Application Protocol (CoAP) <xref target="RFC7252"/> supports machine-to-machine communication across networks of constrained devices. CoAP uses a request/response model where clients make requests to servers in order to request actions on resources. Depending on the situation the same device may act either as a server or a client. </t>

<t>One important class of constrained devices includes devices that are intended to run for years from a small battery, or by scavenging energy from their environment. These devices have limited reachability because they spend most of their time in a sleeping state with no network connectivity. Devices may also have limited reachability due to certain middle-boxes, such as Network Address Translators (NATs) or firewalls. Such middle-boxes often prevent connecting to a device from the Internet unless the connection was initiated by the device. </t>

<t>This document specifies the means for nodes with limited reachability to communicate using simple extensions to CoAP. The extensions enable publish-subscribe communication using a broker node that enables store-and-forward messaging between two or more nodes. Furthermore the extensions facilitate many-to-many communication using CoAP. </t>

<!--
<t>The mechanisms specified in this document are meant to address key design requirements from earlier CoRE drafts covering sleepy node support and mirror server. </t>
-->

</section>

<!-- ====================================================================== -->

<section title="Terminology">
   <t>The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL NOT',
   'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY', and 'OPTIONAL' in this
   specification are to be interpreted as described in <xref target="RFC2119"/>.</t>
   
   <t>This specification requires readers to be familiar with all the terms and concepts that are discussed in <xref target="RFC5988"/> and <xref target="RFC6690"/>. Readers should also be familiar with the terms and concepts discussed in <xref target="RFC7252"/> and <xref target="I-D.ietf-core-resource-directory"/>. The URI template format <xref target="RFC6570"/> is used to describe the REST interfaces defined in this specification.</t>

<t>This specification makes use of the following additional terminology:
<list style="hanging">

<t hangText="Publish-Subscribe (pub/sub):">A messaging paradigm where messages are published to a broker and potential receivers can subscribe to the broker to receive messages. The publishers do not (need to) know where the message will be eventually sent: the publications and subscriptions are matched by a broker and publications are delivered by the broker to subscribed receivers. </t>

<t hangText="CoAP pub/sub function set:">A group of well-known REST resources that together provide the CoAP pub/sub service.</t>

<t hangText="CoAP pub/sub Broker:">A server node capable of receiving messages (publications) from and sending messages to other nodes, and able to match subscriptions and publications in order to route messages to the right destinations. The broker can also temporarily store publications to satisfy future subscriptions. </t>

<t hangText="CoAP pub/sub Client:">A CoAP client that implements the CoAP pub/sub function set. </t>

<t hangText="Topic:">A unique identifier for a particular item being published and/or subscribed to. A broker uses the topics to match subscriptions to publications. </t>

</list>
</t>

</section>
	  
<!-- ====================================================================== -->

<section anchor="architecture" title="Architecture"> 

<section title="CoAP pub/sub Architecture">

<t><xref target="arch-fig"/> shows the architecture of a CoAP pub/sub service. CoAP pub/sub Clients interact with a CoAP pub/sub Broker through the CoAP pub/sub interface which is hosted by the Broker. State information is updated between the Clients and the Broker. The CoAP pub/sub Broker performs a store-and-forward function of state updates between certain CoAP pub/sub Clients. Clients Subscribe to state updates which are Published by other Clients, and which are forwarded by the Broker to the subscribing clients. The CoAP pub/sub Broker also acts as a REST proxy, retaining the last state update provided by clients to supply in response to Read requests from Clients.

</t>

        <t>
        <figure title="CoAP pub/sub Architecture" anchor="arch-fig">
          <artwork align="center">
<![CDATA[
Clients        pub/sub         Broker
+-------+         |
| CoAP  |         |
|pub/sub|---------|------+
|Client |         |      |    +-------+
+-------+         |      +----| CoAP  |
                  |           |pub/sub|
+-------+         |      +----|Broker |
| CoAP  |         |      |    +-------+
|pub/sub|---------|------+
|Client |         |
+-------+         |
]]>
</artwork>
</figure>
</t>
</section>

<section title="CoAP pub/sub Broker">
<t>A CoAP pub/sub Broker is a CoAP Server that exposes an interface for clients to use to initiate publish-subscribe interactions. Unlike clients, the broker needs to be reachable by all clients. The broker also needs to have sufficient resources (storage, bandwidth, etc.) to host CoAP resources, and potentially buffer messages, on behalf of the clients.
</t>

</section>

<section title="CoAP pub/sub Client">
<t>A CoAP pub/sub Client interacts with a CoAP pub/sub Broker using the CoAP pub/sub interface. Clients initiate all interactions with the CoAP pub/sub broker. A data source (e.g., sensor clients) can publish state updates to the broker and data sinks (e.g., actuator clients) can read from or subscribe to state updates from the broker. Application clients can make use of both publish and subscribe in order to exchange state updates with data sources and sinks.</t>

</section> 


<section title="CoAP pub/sub Topic">
<t>The clients and broker use topics to identify a particular resource or object in a publish-subscribe system. Topics are conventionally formed as a hierarchy, e.g. "/sensors/weather/barometer/pressure" or "EP-33543/sen/3303/0/5700". The topics are hosted at the broker and all the clients using the broker share the same namespace for topics.</t>

</section>

</section>

<!-- ====================================================================== -->

<section anchor="function-set" title="CoAP pub/sub Function Set">

<t>This section defines the interfaces between a CoAP pub/sub Broker and pub/sub Clients, which is called the CoAP pub/sub Function Set. The examples throughout this section assume the use of CoAP <xref target="RFC7252"/>. A CoAP pub/sub Broker implementing this specification MUST support the DISCOVER, CREATE, PUBLISH, SUBSCRIBE, UNSUBSCRIBE, READ, and REMOVE operations defined in this section. With the exception of PUBLISH, all operations in the CoAP pub/sub Function Set MUST use confirmable (CON) CoAP messages.
</t>

<section title="DISCOVER">
<t> CoAP pub/sub Clients discover CoAP pub/sub Brokers by using CoAP Simple Discovery or through a Resource Directory (RD) <xref target="I-D.ietf-core-resource-directory"/>. A CoAP pub/sub Broker SHOULD indicate its presence and availability on a network by exposing a link to its pub/sub function set at its .well-known/core location <xref target="RFC6690"/>. A CoAP pub/sub broker MAY register its pub/sub function set location with a Resource Directory. <xref target="discover-fig"/> shows an example of a client discovering a local pub/sub Function Set using CoAP Simple Discovery. A broker wishing to advertise the CoAP pub/sub Function Set for Simple Discovery or through a Resource Directory MUST use the link relation rt="core.ps".
</t>

<t>The DISCOVER interface is specified as follows:
<list style="hanging">
<t hangText="Interaction:">Client -> Broker</t>
<t hangText="Method:">GET</t>
<t hangText="URI Template:">/.well-known/core{?rt}</t>
<t hangText="URI Template Variables:">
<list style="hanging">
<t hangText="rt := ">Resource Type (optional). MAY contain the value "core.ps"</t>
</list>
</t>
<t hangText="Content-Format:">application/link-format (if any)</t>
</list>
</t>

<t>The following response codes are defined for this interface:
<list style="hanging">
<t hangText="Success:"> 2.05 "Content" with an
application/link-format payload containing one or more matching entries for the broker resource. A pub/sub broker SHOULD use the value "ps" for the link subject variable whenever possible.</t>
<t hangText="Failure:"> 4.04 "Not Found" is returned in case no matching entry is found for a unicast request.</t>
<t hangText="Failure:"> 4.00 "Bad Request" is returned in case of a malformed request for a unicast request.</t>
<t hangText="Failure:"> No error response to a multicast request.</t>
</list>
</t>

        <t>
        <figure title="Example of DISCOVER" anchor="discover-fig">
          <artwork align="center">
            <![CDATA[
Client                                          Broker
  |                                               |
  | ------ GET /.well-known/core?rt=core.ps ----->|
  |                                               |
  | <------2.05 Content “</ps>;rt=core.ps”--------|
  |                                               |
]]>
</artwork>
</figure>
</t>
</section>


<section title="CREATE">
<t>Clients create topics on the broker using the CREATE interface. A client wishing to create a topic MUST use CoAP POST to the pub/sub function set location with a payload indicating the desired topic. The topic MUST use the CoRE link format <xref target="RFC6690"/>. The client MAY indicate the lifetime of the topic by including the max-age option in the CREATE request. Broker MUST return a response code of "2.01 Created" if the topic is created. The broker MUST return the appropriate 4.xx response code indicating the reason for failure if a new topic can not be created. Broker SHOULD remove topics if the max-age of the topic is exceeded without any publishes to the topic.
</t>

<t>The CREATE interface is specified as follows:
<list style="hanging">
  <t hangText="Interaction:">Client -> Broker</t>
  <t hangText="Method:">POST</t>
  <t hangText="URI Template:">/{+ps}</t>
  <t hangText="URI Template Variables:">
    <list style="hanging">
      <t hangText="ps := ">pub/sub Function Set path (mandatory). The path of the pub/sub Function Set, as obtained from discovery. A pub/sub broker SHOULD use the value "ps" for this variable whenever possible.</t>
    </list>
  </t>
  <t hangText="Content-Format:">application/link-format</t>
  <t hangText="Payload:">The desired topic to CREATE</t>
</list>
</t>

<t>The following response codes are defined for this interface:
<list style="hanging">
<t hangText="Success:"> 2.01 "Created". Successful Creation of the topic</t>
<t hangText="Failure:"> 4.00 "Bad Request". Malformed request.</t>
<t hangText="Failure:"> 4.01 "Unauthorized". Authorization failure.</t>
<t hangText="Failure:"> 4.03 "Forbidden". Topic already exists.</t>
</list>
</t>

<t><xref target="create-fig"/> shows an example of a topic called "topic1" being successfully created.
</t>

<t>
<figure title="Example of CREATE" anchor="create-fig">
<artwork align="center">
<![CDATA[
Client                                          Broker
  |                                               |
  | -------------- POST /ps "<topic1>" ---------->|
  |                                               |
  | <---------------- 2.01 Created ---------------|
  |                                               |
]]>
</artwork>
</figure>
</t>

</section>


<section title="PUBLISH">
<t>A CoAP pub/sub Client uses the PUBLISH interface for updating topics on the broker. The client MUST use the PUT method to publish state updates to the CoAP pub/sub Broker. A CoAP client publishing on a topic MAY indicate the maximum lifetime of the value by including the max-age option in the publish request. A client MAY use confirmable (CON) or non-confirmable (NON) messages to publish updates to a broker. The broker MUST return a response code of "2.04 Changed" if the publish is accepted or "4.04 Not Found" if the topic does not exist. A broker MAY return "4.29 Too Many Requests" if simple flow control as described in <xref target="sec-flow-control"/> is implemented.
</t>

<t>The Broker MUST notify all clients subscribed on a particular topic each time it receives a publish on that topic. An example is shown in <xref target="subscribe-fig"/>. If a client publishes to a broker using non-confirmable messages, the broker MAY notify subscribed clients using non-confirmable messages. If a client publishes to a broker using confirmable messages, the broker MUST also notify all subscribed clients using confirmable messages. If a client publishes to a broker with the max-age option, the broker MUST include the same value for the max-age option in all notifications. A CoAP pub/sub broker MUST notify a client subscribed on a topic using the CoAP Content-Format that client used to subscribe to that topic, regardless of the CoAP content-format used to publish updates to the topic. A broker MUST use CoAP Notification as described in <xref target="I-D.ietf-core-observe"/> to notify subscribed clients.
</t>

<t>The PUBLISH interface is specified as follows:
<list style="hanging">
<t hangText="Interaction:">Client -> Broker</t>
<t hangText="Method:">PUT</t>
<t hangText="URI Template:">/{+ps}/{topic}</t>
<t hangText="URI Template Variables:">
<list style="hanging">
<t hangText="ps := ">pub/sub Function Set path (mandatory). The path of the pub/sub Function Set, as obtained from discovery.</t>
<t hangText="topic := ">The desired topic to publish on.</t>
</list>
</t>
<t hangText="Content-Format:">Any valid CoAP Content Format</t>
<t hangText="Payload:">Representation of the topic value (CoAP resource state representation) in the indicated Content-Format</t>
</list>
</t>

<t>The following response codes are defined for this interface:
<list style="hanging">
<t hangText="Success:"> 2.04 "Changed". Successful publish, topic is updated</t>
<t hangText="Failure:"> 4.00 "Bad Request". Malformed request.</t>
<t hangText="Failure:"> 4.01 "Unauthorized". Authorization failure.</t>
<t hangText="Failure:"> 4.04 "Not Found". Topic does not exist.</t>
<t hangText="Failure:"> 4.29 "Too Many Requests". The client should slow down the rate of publish messages for this topic (see <xref target="sec-flow-control"/>).</t>
</list>
</t>

<t><xref target="publish-fig"/> shows an example of a new value being successfully published to the topic "topic1". See <xref target="subscribe-fig"/> for an example of a broker forwarding a message from a publishing client to a subscribed client.
</t>

<t>
<figure title="Example of PUBLISH" anchor="publish-fig">
<artwork align="center">
<![CDATA[
Client                                          Broker
  |                                               |
  | ---------- PUT /ps/topic1 "1033.3"  --------> |
  |                                               |
  |                                               |
  | <--------------- 2.04 Changed---------------- |
  |                                               |
]]>
</artwork>
</figure>
</t>
</section>


<section title="SUBSCRIBE">
<t>CoAP pub/sub Clients subscribe to topics on the Broker using CoAP Observe as described in <xref target="I-D.ietf-core-observe"/>. A CoAP pub/sub Client wishing to Subscribe to a topic on a broker MUST use a CoAP GET with Observe registration. The Broker MAY add the client to a list of observers. The Broker MUST return a response code of "2.05 Content" along with the most recently published value if the topic contains a valid value. If the topic was published with the max-age option, the broker MUST set the max-age option in the valid response to the amount of time remaining for the value to be valid since the last publish operation on that topic. The Broker MUST return a response code of "2.04 No Content" if the max-age of the previously stored value has expired. The Broker MUST return a response code "4.04 Not Found" if the topic does not exist or has been removed.
</t>

<t>The SUBSCRIBE interface is specified as follows:
<list style="hanging">
<t hangText="Interaction:">Client -> Broker</t>
<t hangText="Method:">GET</t>
<t hangText="Options:">Observe:0</t>
<t hangText="URI Template:">/{+ps}/{topic}</t>
<t hangText="URI Template Variables:">
<list style="hanging">
<t hangText="ps := ">pub/sub Function Set path (mandatory). The path of the pub/sub Function Set, as obtained from discovery.</t>
<t hangText="topic := ">The desired topic to subscribe to.</t>
</list>
</t>
</list>
</t>

<t>The following response codes are defined for this interface:
<list style="hanging">
<t hangText="Success:"> 2.05 "Content". Successful subscribe, current value included</t>
<t hangText="Success:"> 2.04 "No Content". Successful subscribe, value not included</t>
<t hangText="Failure:"> 4.00 "Bad Request". Malformed request.</t>
<t hangText="Failure:"> 4.01 "Unauthorized". Authorization failure.</t>
<t hangText="Failure:"> 4.04 "Not Found". Topic does not exist.</t>
</list>
</t>

<t><xref target="subscribe-fig"/> shows an example of Client2 subscribing to "topic1" and receiving two notifications from the broker. The first notification from the broker uses the last stored value associated with the topic1. The second notification from the broker is in response to the publish received from  Client1.
</t>

<t>
<figure title="Example of SUBSCRIBE" anchor="subscribe-fig">
<artwork align="center">
<![CDATA[
Client1   Client2                                          Broker
  |          |                                               |
  |          | ----- GET /ps/topic1 Observe:0 Token:XX ----> |
  |          |                                               |
  |          | <---------- 2.05 Content Observe:10---------- |
  |          |                                               |
  |          |                                               |
  |          |                                               |
  | ---------|----------- PUT /ps/topic1 "1033.3"  --------> |
  |          |                                               |
  |          | <---------- 2.05 Content Observe:11---------- |
  |          |                                               |
]]>
</artwork>
</figure>
</t>
</section>


<section title="UNSUBSCRIBE">
<t>CoAP pub/sub Clients unsubscribe from topics on the Broker using the CoAP Cancel Observation operation. A CoAP pub/sub Client wishing to unsubscribe to a topic on a Broker MUST either use CoAP GET with Observe using an Observe parameter of 1 or send a CoAP Reset message in response to a publish <xref target="I-D.ietf-core-observe"/>.
</t>

<t>The UNSUBSCRIBE interface is specified as follows:
<list style="hanging">
<t hangText="Interaction:">Client -> Broker</t>
<t hangText="Method:">GET</t>
<t hangText="Options:">Observe:1</t>
<t hangText="URI Template:">/{+ps}/{topic}</t>
<t hangText="URI Template Variables:">
<list style="hanging">
<t hangText="ps := ">pub/sub Function Set path (mandatory). The path of the pub/sub Function Set, as obtained from discovery.</t>
<t hangText="topic := ">The desired topic to unsubscribe from.</t>
</list>
</t>

</list>
</t>

<t>The following response codes are defined for this interface:
<list style="hanging">
<t hangText="Success:"> 2.05 "Content". Successful unsubscribe, current value included</t>
<t hangText="Success:"> 2.04 "No Content". Successful unsubscribe, value not included</t>
<t hangText="Failure:"> 4.00 "Bad Request". Malformed request.</t>
<t hangText="Failure:"> 4.01 "Unauthorized". Authorization failure.</t>
<t hangText="Failure:"> 4.04 "Not Found". Topic does not exist.</t>
</list>
</t>

<t><xref target="unsubscribe-fig"/> shows an example of a client unsubscribe using the Observe=1 cancellation method.
</t>

<t>
<figure title="Example of UNSUBSCRIBE" anchor="unsubscribe-fig">
<artwork align="center">
<![CDATA[
Client                                          Broker
  |                                               |
  | ----- GET /ps/topic1 Observe:1 Token:XX ----> |
  |                                               |
  | <------------- 2.05 Content ----------------- |
  |                                               |
]]>
</artwork>
</figure>
</t>
</section>


<section title="READ">
<t>A CoAP pub/sub client wishing to obtain only the most recent published value on a topic MAY use the READ interface. For reading, the client uses the CoAP GET method. The Broker MUST return a response code of "2.05 Content" along with the most recently published value if the topic contains a valid value. If the topic was published with the max-age option, the broker MUST set the max-age option in the valid response to the amount of time remaining for the topic to be valid since the last publish. The Broker MUST return a response code of "2.04 No Content" if the max-age of the previously stored value has expired. The Broker MUST return a response code "4.04 Not Found" if the topic does not exist or has been removed.
</t>

<t>The READ interface is specified as follows:
<list style="hanging">
<t hangText="Interaction:">Client -> Broker</t>
<t hangText="Method:">GET</t>
<t hangText="URI Template:">/{+ps}/{topic}</t>
<t hangText="URI Template Variables:">
<list style="hanging">
<t hangText="ps := ">pub/sub Function Set path (mandatory). The path of the pub/sub Function Set, as obtained from discovery.</t>
<t hangText="topic := ">The desired topic to READ.</t>
</list>
</t>
</list>
</t>

<t>The following response codes are defined for this interface:
<list style="hanging">
<t hangText="Success:"> 2.05 "Content". Successful READ, current value included</t>
<t hangText="Success:"> 2.04 "No Content". Topic exists, value not included</t>
<t hangText="Failure:"> 4.00 "Bad Request". Malformed request.</t>
<t hangText="Failure:"> 4.01 "Unauthorized". Authorization failure.</t>
<t hangText="Failure:"> 4.04 "Not Found". Topic does not exist.</t>
</list>
</t>

<t><xref target="read-fig"/> shows an example of s successful READ from topic1.
</t>

<t>
<figure title="Example of READ" anchor="read-fig">
<artwork align="center">
<![CDATA[
Client                                          Broker
  |                                               |
  | -------------- GET /ps/topic1  -------------> |
  |                                               |
  |                                               |
  | <--------------- 2.05 Content --------------- |
  |                                               |
]]>
</artwork>
</figure>
</t>

</section>


<section title="REMOVE">
<t> A CoAP pub/sub Client wishing to remove a topic can use the CoAP Delete operation on the URI of the topic. The CoAP pub/sub Broker MUST return "2.02 Deleted" if the remove operation is successful. The broker MUST return the appropriate 4.xx response code indicating the reason for failure if the topic can not be removed.
</t>

<t>The REMOVE interface is specified as follows:
<list style="hanging">
<t hangText="Interaction:">Client -> Broker</t>
<t hangText="Method:">DELETE</t>
<t hangText="URI Template:">/{+ps}/{topic}</t>
<t hangText="URI Template Variables:">
<list style="hanging">
<t hangText="ps := ">pub/sub Function Set path (mandatory). The path of the pub/sub Function Set, as obtained from discovery.</t>
<t hangText="topic := ">The desired topic to REMOVE.</t>
</list>
</t>
<t hangText="Content-Format:">None</t>
<t hangText="Response Payload:">None</t>
</list>
</t>

<t>The following response codes are defined for this interface:
<list style="hanging">
<t hangText="Success:"> 2.02 "Deleted". Successful remove</t>
<t hangText="Failure:"> 4.00 "Bad Request". Malformed request.</t>
<t hangText="Failure:"> 4.01 "Unauthorized". Authorization failure.</t>
<t hangText="Failure:"> 4.04 "Not Found". Topic does not exist.</t>
</list>
</t>

<t><xref target="remove-fig"/> shows a successful remove of topic1.
</t>

<t>
<figure title="Example of REMOVE" anchor="remove-fig">
<artwork align="center">
<![CDATA[
Client                                         Broker
 |                                               |
 | ------------- DELETE /ps/topic1 ------------> |
 |                                               |
 |                                               |
 | <-------------- 2.02 Deleted ---------------- |
 |                                               |
]]>
</artwork>
</figure>
</t>

</section>

</section>

<!-- ====================================================================== -->

<section title="CoAP pub/sub Operation with Resource Directory">
<t>A CoAP pub/sub Broker may register a pub/sub Function Set with a Resource Directory. A pub/sub Client may use an RD to discover a pub/sub Broker.
</t>

<t>A CoAP pub/sub Client may register CoRE Links <xref target="RFC6690"/> to created pub/sub Topics with an RD. A pub/sub Client may use an RD to discover pub/sub Topics. A client which registers pub/sub Topics with an RD MUST use the context relation (con) <xref target="I-D.ietf-core-resource-directory"/> to indicate that the context of the registered links is the pub/sub Broker.
</t>

</section>


<!-- ====================================================================== -->

<section title="Sleep-Wake Operation">

<t>CoAP pub/sub provides a way for client nodes to sleep between operations, conserving energy during idle periods. This is made possible by shifting the server role to the broker, allowing the broker to be always-on and respond to requests from other clients while a particular client is sleeping.</t>

<t>For example, the broker will retain the last state update received from a sleeping client, in order to supply the most recent state update to other clients in response to read and subscribe operations.</t>

<t>Likewise, the broker will retain the last state update received on the topic such that a sleeping client, upon waking, can perform a read operation to the broker to update its own state from the most recent system state update.</t>

</section>

 
<!-- ====================================================================== -->

<section anchor="sec-flow-control" title="Simple Flow Control">

<t> Since the broker node has to potentially send a large amount of
notification messages for each publish message and it may be serving a
large amount of subscribers and publishers simultaneously, the broker
may become overwhelmed if it receives many publish messages to popular
topics in a short period of time. </t>

<t> If the broker is unable to serve a certain client that is sending
publish messages too fast, the broker MUST respond with Response Code
4.29, "Too Many Requests". This Response Code is like HTTP 429 "Too
Many Requests" but uses the Max-Age Option in place of the
"Retry-After" header field to indicate the number of seconds after
which to retry. The broker MAY stop creating notifications from the
publish messages from this client and to this topic for the indicated
time. </t>

<t> If a client receives the 4.29 Response Code from the broker for a
publish message to a topic, it MUST NOT send new publish messages to
the broker on the same topic before the time indicated in Max-Age has
passed. </t>

</section>

 
<!-- ====================================================================== -->


<section anchor="SecurityConsiderations" title="Security Considerations">
<t>CoAP pub/sub re-uses CoAP <xref target="RFC7252"/>, CoRE Resource Directory <xref target="I-D.ietf-core-resource-directory"/>, and Web Linking <xref target="RFC5988"/> and therefore the security considerations of those documents also apply to this specification. Additionally, a CoAP pub/sub broker and the clients SHOULD authenticate each other and enforce access control policies. A malicious client could subscribe to data it is not authorized to or mount a denial of service attack against the broker by publishing a large number of resources. The authentication can be performed using the already standardized DTLS offered mechanisms, such as certificates. DTLS also allows communication security to be established to ensure integrity and confidentiality protection of the data exchanged between these relevant parties. Provisioning the necessary credentials, trust anchors and authorization policies is non-trivial and subject of ongoing work.</t>

<t>The use of a CoAP pub/sub broker introduces challenges for the use of end-to-end security between for example a client device on a sensor network and a client application running in a cloud-based server infrastructure since brokers terminate the exchange. While running separate DTLS sessions from the client device to the broker and from broker to client application protects confidentially on those paths, the client device does not know whether the commands coming from the broker are actually coming from the client application. Similarly, a client application requesting data does not know whether the data originated on the client device. For scenarios where end-to-end security is desirable the use of application layer security is unavoidable. Application layer security would then provide a guarantee to the client device that any request originated at the client application. Similarly, integrity protected sensor data from a client device will also provide guarantee to the client application that the data originated on the client device itself. The protected data can also be verified by the intermediate broker ensuring that it stores/caches correct request/response and no malicious messages/requests are accepted. The broker would still be able to perform aggregation of data/requests collected.</t>

<t>Depending on the level of trust users and system designers place in the CoAP pub/sub broker, the use of end-to-end object security is RECOMMENDED <xref target="I-D.selander-ace-object-security"/>.</t>
</section> 


<!-- ====================================================================== -->
<!-- 
<section anchor="PrivacyConsiderations" title="Privacy Considerations">
  <t>TBD</t>
</section>
--> 
<!-- ====================================================================== -->

<section anchor="iana" title="IANA Considerations">
<t>This document registers one attribute value in the Resource Type (rt=) registry established with <xref target="RFC6690"/> and appends to the definition of one CoAP Response Code in the CoRE Parameters Registry.</t>

<section title="Resource Type value 'core.ps'">
<t>
<list style="symbols">
<t>Attribute Value: core.ps</t>
<t>Description: <xref target="function-set"/> of [[This document]]</t>
<t>Reference: [[This document]]</t>
<t>Notes: None</t>
</list>
</t>
</section>

<section title="Response Code value '2.04'">
<t>
<list style="symbols">
<t>Response Code: 2.04</t>
<t>Description: Add No Content response to GET to the existing definition of the 2.04 response code.</t>
<t>Reference: [[This document]]</t>
<t>Notes: None</t>
</list>
</t>
</section>

<section title="Response Code value '4.29'">
<t>
<list style="symbols">
<t>Response Code: 4.29</t>
<t>Description: This error code is used by a server to indicate that a client is making too many requests on a resource.</t>
<t>Reference: [[This document]]</t>
<t>Notes: None</t>
</list>
</t>
</section>


</section>

<!-- ====================================================================== -->

    
<section anchor="acks" title="Acknowledgements">
  <t>The authors would like to thank Hannes Tschofenig, Zach Shelby, Mohit Sethi, Peter Van der Stok, Tim Kellogg, Anders Eriksson, and Goran Selander for their contributions and reviews. </t>
</section>


</middle>

<!-- ====================================================================== -->
  <back>

<references title="Normative References">
<?rfc include="reference.RFC.3986"?>
<?rfc include="reference.RFC.2119"?>
<?rfc include="reference.RFC.6690"?>
<?rfc include="reference.RFC.6570"?>
<?rfc include="reference.I-D.ietf-core-resource-directory"?>
<?rfc include="reference.I-D.ietf-core-observe"?>
<?rfc include="reference.I-D.selander-ace-object-security"?>
<!--      <?rfc include="reference.I-D.draft-ietf-core-interfaces"?> -->
<?rfc include="reference.RFC.7252"?>


    </references>

    <references title="Informative References">
	      <?rfc include="reference.RFC.5988"?>
    </references>
  
  </back>

</rfc>
